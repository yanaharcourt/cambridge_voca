// ===================================================================
// CAMBRIDGE VOCABULARY - –ß–ê–°–¢–¨ 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò
// ===================================================================

class CambridgeVocabulary {
    constructor() {
        this.words = [];
        this.wordStats = {};
        this.currentFilter = 'studying';
        this.selectedWords = new Set();
        
        console.log('üöÄ Initializing Cambridge Vocabulary...');
        this.init();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    init() {
        this.loadWordStats();
        this.initializeWordsFromHTML();
        this.setupEventListeners();
        this.updateStatistics();
        this.filterWordsByStatus();
        
        // –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        setTimeout(() => this.updateStatistics(), 500);
        setTimeout(() => this.filterWordsByStatus(), 1000);
        
        this.initializeFavoriteButtons();
        this.addCategoryCheckboxes();

        console.log('‚úÖ Cambridge Vocabulary initialized');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        this.initializeFavoriteButtons();

        const savedFilter = localStorage.getItem('cambridge_filter_favorites');
        if (savedFilter === 'favorites') {
            const filterSelect = document.getElementById('filterSelect');
            if (filterSelect) {
                filterSelect.value = 'favorites';
                this.filterByFavorites();
            }
        }
        
        // ‚Üê –ó–ê–ú–ï–ù–ò–¢–¨ –í–°–ï setTimeout –ù–ê –ü–†–Ø–ú–´–ï –í–´–ó–û–í–´:
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –°–†–ê–ó–£ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.updateCategoryVisibility();
        this.updateAllCategoryCheckboxes();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ localStorage
    loadWordStats() {
        try {
            this.wordStats = JSON.parse(localStorage.getItem('wordStats') || '{}');
            console.log('üìä Loaded word stats:', Object.keys(this.wordStats).length, 'entries');
        } catch (error) {
            console.error('‚ùå Error loading word stats:', error);
            this.wordStats = {};
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ localStorage
    saveWordStats() {
        try {
            localStorage.setItem('wordStats', JSON.stringify(this.wordStats));
            console.log('üíæ Word stats saved');
        } catch (error) {
            console.error('‚ùå Error saving word stats:', error);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤ –∏–∑ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    initializeWordsFromHTML() {
        console.log('üìñ Initializing words from HTML...');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
        let savedWords = [];
        try {
            const saved = localStorage.getItem('cambridge_dictionary');
            if (saved) {
                savedWords = JSON.parse(saved);
                console.log('üíæ Found saved words in localStorage:', savedWords.length);
            }
        } catch (error) {
            console.error('‚ùå Error loading saved words:', error);
        }
        
        this.words = [];
        const wordCards = document.querySelectorAll('.word-card[data-word]');
        
        console.log(`Found ${wordCards.length} word cards in HTML`);
        
        wordCards.forEach(card => {
            const wordData = this.extractWordFromCard(card);
            if (wordData) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                const savedWord = savedWords.find(w => w.text === wordData.text);
                if (savedWord) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤–∫–ª—é—á–∞—è favorite —Å—Ç–∞—Ç—É—Å)
                    // –ù–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –∏–∑ HTML –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    const mergedWord = {
                        ...wordData,  // –î–∞–Ω–Ω—ã–µ –∏–∑ HTML
                        favorite: savedWord.favorite || false,  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                        ...Object.fromEntries(
                            Object.entries(savedWord).filter(([key]) => 
                                !['text', 'translation', 'phonetics', 'type', 'category', 'level', 'imageUrl'].includes(key)
                            )
                        )
                    };
                    this.words.push(mergedWord);
                    console.log('üîÑ Restored word with favorites:', mergedWord.text, 'favorite:', mergedWord.favorite);
                } else {
                    // –ù–æ–≤–æ–µ —Å–ª–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ HTML
                    wordData.favorite = false;  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
                    this.words.push(wordData);
                }
            }
        });

        console.log(`‚úÖ Initialized ${this.words.length} words from HTML`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º, –∞ –æ–±—ä–µ–¥–∏–Ω—è–µ–º)
        localStorage.setItem('cambridge_dictionary', JSON.stringify(this.words));
    }


    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª–æ–≤–µ –∏–∑ HTML –∫–∞—Ä—Ç–æ—á–∫–∏
    extractWordFromCard(card) {
        try {
            const wordText = card.dataset.word;
            const category = card.dataset.category || 'nouns';
            const level = card.dataset.level || 'pre-a1';
            const imageUrl = card.dataset.imageUrl;
            
            const translationElement = card.querySelector('.word-translation');
            const phoneticElement = card.querySelector('.word-phonetics');
            const typeElement = card.querySelector('.word-type');
            
            if (!wordText || !translationElement) {
                console.warn('‚ö†Ô∏è Incomplete word data for:', wordText);
                return null;
            }

            return {
                text: wordText,
                translation: translationElement.textContent.trim(),
                phonetics: phoneticElement ? phoneticElement.textContent.trim() : '',
                type: typeElement ? typeElement.textContent.trim() : '',
                category: category,
                level: level,
                imageUrl: imageUrl || 'assets/img/default-word.svg',
                favorite: false  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù–ï –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º (–±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
            };
        } catch (error) {
            console.error('‚ùå Error extracting word from card:', error);
            return null;
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        console.log('üéØ Setting up event listeners...');

        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –≤–∫–ª–∞–¥–æ–∫ (–ù–∞ –∏–∑—É—á–µ–Ω–∏–∏/–ò–∑—É—á–µ–Ω–æ)
        this.setupTabSwitchers();
        
        // –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤
        this.setupWordCheckboxes();
        
        // –ö–Ω–æ–ø–∫–∞ "–£—á–∏—Ç—å —Å–ª–æ–≤–∞"
        this.setupStudyButton();
        
        // –ö–Ω–æ–ø–∫–∏ –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        this.setupBatchActions();
        
        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å–ª–æ–≤–∞–º–∏
        this.setupWordActions();
        
        // –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫
        this.setupFilters();
        
        // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π localStorage
        window.addEventListener('storage', () => {
            this.loadWordStats();
            this.updateStatistics();
            this.filterWordsByStatus();
        });

        console.log('‚úÖ Event listeners set up');
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –≤–∫–ª–∞–¥–æ–∫
    setupTabSwitchers() {
        const switcherBtns = document.querySelectorAll('.switcher-btn');
        
        switcherBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                // –£–±–∏—Ä–∞–µ–º active —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
                switcherBtns.forEach(b => b.classList.remove('active'));
                
                // –î–æ–±–∞–≤–ª—è–µ–º active –∫ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
                btn.classList.add('active');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä
                this.currentFilter = btn.dataset.filter;
                
                console.log('üîÑ Switched to tab:', this.currentFilter);
                
                // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏
                this.clearSelection();
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞
                this.filterWordsByStatus();
                const savedFilter = localStorage.getItem('cambridge_filter_favorites');
                if (savedFilter && savedFilter !== 'all') {
                    const filterSelect = document.getElementById('filterSelect');
                    if (filterSelect) {
                        filterSelect.value = savedFilter;
                        this.filterByFavorites();
                    }
                }

                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å–ª–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –ø–æ–¥ —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É
                this.updateCategoryVisibility();

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                this.updateStatistics();

            });
        });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–µ–∫–±–æ–∫—Å–æ–≤ –¥–ª—è —Å–ª–æ–≤
    setupWordCheckboxes() {
        // –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å—ã –∫ —Å–ª–æ–≤–∞–º –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        this.addCheckboxesToWords();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" 
        const selectAllCheckbox = document.querySelector('.select-all-checkbox');
        if (selectAllCheckbox) {
            selectAllCheckbox.addEventListener('change', () => {
                console.log('üîò Select All checkbox changed:', selectAllCheckbox.checked);
                
                const wordCheckboxes = document.querySelectorAll('.word-checkbox:not(.select-all-checkbox)');
                const visibleCheckboxes = Array.from(wordCheckboxes).filter(cb => {
                    const card = cb.closest('.word-card');
                    return card && card.style.display !== 'none';
                });
                
                console.log(`üìã Found ${visibleCheckboxes.length} visible word checkboxes`);
                
                // –û—á–∏—â–∞–µ–º selectedWords –ø–µ—Ä–µ–¥ –º–∞—Å—Å–æ–≤—ã–º –≤—ã–±–æ—Ä–æ–º/—Å–Ω—è—Ç–∏–µ–º
                if (selectAllCheckbox.checked) {
                    // –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Å–µ—Ö - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ —Å–ª–æ–≤–∞
                    visibleCheckboxes.forEach(checkbox => {
                        checkbox.checked = true;
                        const wordText = checkbox.dataset.word;
                        if (wordText) {
                            this.selectedWords.add(wordText);
                        }
                    });
                } else {
                    // –ü—Ä–∏ —Å–Ω—è—Ç–∏–∏ –≤—Å–µ—Ö - —É–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ —Å–ª–æ–≤–∞
                    visibleCheckboxes.forEach(checkbox => {
                        checkbox.checked = false;
                        const wordText = checkbox.dataset.word;
                        if (wordText) {
                            this.selectedWords.delete(wordText);
                        }
                    });
                }
                
                console.log(`‚úÖ Selected words count: ${this.selectedWords.size}`);
                
                this.updateStudyButton();
                this.updateBatchActions();
                this.updateAllCategoryCheckboxes();
            });
        } else {
            console.warn('‚ö†Ô∏è Select All checkbox not found');
        }
    }

    updateSelectAllCheckbox() {
        const selectAllCheckbox = document.querySelector('.select-all-checkbox');
        if (!selectAllCheckbox) return;
        
        const wordCheckboxes = document.querySelectorAll('.word-checkbox:not(.select-all-checkbox)');
        const visibleCheckboxes = Array.from(wordCheckboxes).filter(cb => {
            const card = cb.closest('.word-card');
            return card && card.style.display !== 'none';
        });
        
        const checkedVisibleCheckboxes = visibleCheckboxes.filter(cb => cb.checked);
        
        if (checkedVisibleCheckboxes.length === 0) {
            selectAllCheckbox.checked = false;
            selectAllCheckbox.indeterminate = false;
        } else if (checkedVisibleCheckboxes.length === visibleCheckboxes.length) {
            selectAllCheckbox.checked = true;
            selectAllCheckbox.indeterminate = false;
        } else {
            selectAllCheckbox.checked = false;
            selectAllCheckbox.indeterminate = true;
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ –∫ —Å–ª–æ–≤–∞–º
    addCheckboxesToWords() {
        document.querySelectorAll('.word-card .word-header .word-actions').forEach(actionsDiv => {
            if (!actionsDiv.querySelector('.word-checkbox')) {
                const wordCard = actionsDiv.closest('.word-card');
                const wordText = wordCard.dataset.word;
                
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.className = 'word-checkbox';
                checkbox.dataset.word = wordText;
                
                checkbox.addEventListener('change', () => {
                    this.updateWordSelection(checkbox);
                    this.updateStudyButton();
                    this.updateBatchActions();
                });
                
                actionsDiv.insertBefore(checkbox, actionsDiv.firstChild);
            }
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤–∞
    updateWordSelection(checkbox) {
        const word = checkbox.dataset.word;
        
        if (checkbox.checked) {
            this.selectedWords.add(word);
        } else {
            this.selectedWords.delete(word);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
        this.updateSelectAllCheckbox();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£—á–∏—Ç—å —Å–ª–æ–≤–∞"
    setupStudyButton() {
        const studyButton = document.querySelector('.study-button');
        if (studyButton) {
            studyButton.addEventListener('click', () => {
                const selectedCount = this.selectedWords.size;
                
                if (selectedCount === 0) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è');
                    return;
                }
                
                console.log('üéì Starting training with', selectedCount, 'words');
                
                // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
                const selectedWordsArray = Array.from(this.selectedWords);
                const wordsForTraining = this.words.filter(word => 
                    selectedWordsArray.includes(word.text)
                );
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
                window.wordTraining.selectedWords = wordsForTraining;
                window.wordTraining.count = selectedCount;
                window.wordTraining.initialize(selectedCount);
            });
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–£—á–∏—Ç—å —Å–ª–æ–≤–∞"
    updateStudyButton() {
        const studyButton = document.querySelector('.study-button');
        if (!studyButton) return;
        
        const selectedCount = this.selectedWords.size;
        
        if (selectedCount > 0) {
            studyButton.textContent = `–£—á–∏—Ç—å —Å–ª–æ–≤–∞ (${selectedCount})`;
            studyButton.classList.add('active');
        } else {
            studyButton.textContent = '–£—á–∏—Ç—å —Å–ª–æ–≤–∞';
            studyButton.classList.remove('active');
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    setupBatchActions() {
        const backBtn = document.getElementById('batchActionBack');
        const markLearnedBtn = document.getElementById('batchActionMarkLearned');
        const deleteBtn = document.getElementById('batchActionDelete');

        if (backBtn) {
            backBtn.addEventListener('click', () => {
                this.clearSelection();
            });
        }

        if (markLearnedBtn) {
            markLearnedBtn.addEventListener('click', () => {
                this.batchMarkLearned();
            });
        }

        if (deleteBtn) {
            deleteBtn.addEventListener('click', () => {
                if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞?')) {
                    this.batchDeleteWords();
                }
            });
        }
    }

    // –ú–∞—Å—Å–æ–≤–æ–µ –æ—Ç–º–µ—á–∞–Ω–∏–µ —Å–ª–æ–≤ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω—ã—Ö/–Ω–µ–∏–∑—É—á–µ–Ω–Ω—ã—Ö
    batchMarkLearned() {
        const selectedArray = Array.from(this.selectedWords);
        const isStudyingTab = this.currentFilter === 'studying';
        
        selectedArray.forEach(wordText => {
            if (!this.wordStats[wordText]) {
                this.wordStats[wordText] = { successfulAttempts: 0, lastAttemptDate: null };
            }
            
            if (isStudyingTab) {
                // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∏–∑—É—á–µ–Ω–Ω—ã–µ
                this.wordStats[wordText].successfulAttempts = 1;
                this.wordStats[wordText].lastAttemptDate = new Date().toDateString();
            } else {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ
                this.wordStats[wordText].successfulAttempts = 0;
                this.wordStats[wordText].lastAttemptDate = null;
            }
        });

        this.saveWordStats();
        this.clearSelection();
        this.filterWordsByStatus();
        this.updateStatistics();
        
        // –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ß–ö–£ –≤ –∫–æ–Ω–µ—Ü:
        this.updateCategoryVisibility();
        
        console.log(`‚úÖ Batch ${isStudyingTab ? 'marked as learned' : 'returned to studying'}:`, selectedArray.length, 'words');
    }

    // –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤
    batchDeleteWords() {
        const selectedArray = Array.from(this.selectedWords);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        selectedArray.forEach(wordText => {
            delete this.wordStats[wordText];
        });
        
        // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ DOM
        selectedArray.forEach(wordText => {
            const card = document.querySelector(`.word-card[data-word="${wordText}"]`);
            if (card) {
                card.remove();
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤
        this.words = this.words.filter(word => !selectedArray.includes(word.text));
        
        this.saveWordStats();
        localStorage.setItem('cambridge_dictionary', JSON.stringify(this.words));
        
        this.clearSelection();
        this.updateStatistics();
        
        console.log('üóëÔ∏è Batch deleted:', selectedArray.length, 'words');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    updateBatchActions() {
        const batchActions = document.getElementById('batch-actions');
        const markLearnedBtn = document.getElementById('batchActionMarkLearned');
        
        if (!batchActions || !markLearnedBtn) return;
        
        const selectedCount = this.selectedWords.size;
        
        if (selectedCount > 0) {
            batchActions.style.display = 'block';
            
            // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∫–ª–∞–¥–∫–∏
            if (this.currentFilter === 'studying') {
                markLearnedBtn.textContent = '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–µ';
            } else {
                markLearnedBtn.textContent = '–í–µ—Ä–Ω—É—Ç—å –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ';
            }
        } else {
            batchActions.style.display = 'none';
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
    clearSelection() {
        this.selectedWords.clear();
        
        // –°–Ω–∏–º–∞–µ–º –≤—Å–µ –≥–∞–ª–æ—á–∫–∏
        document.querySelectorAll('.word-checkbox').forEach(checkbox => {
            checkbox.checked = false;
        });
        
        this.updateStudyButton();
        this.updateBatchActions();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å–ª–æ–≤–∞–º–∏ (–ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ, –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, —É–¥–∞–ª–µ–Ω–∏–µ)
    setupWordActions() {
        document.addEventListener('click', (e) => {
            const target = e.target;
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –∏–ª–∏ –∏—Ö –∏–∫–æ–Ω–∫–∞–º
            const button = target.classList.contains('action-button') ? target : target.closest('.action-button');
            if (!button) return;
            
            const wordCard = button.closest('.word-card');
            if (!wordCard) return;
            
            const wordText = wordCard.dataset.word;
            
            if (button.classList.contains('pronounce')) {
                e.preventDefault();
                e.stopPropagation();
                this.pronounceWord(wordText);
            }
            
            if (button.classList.contains('favorite')) {
                e.preventDefault();
                e.stopPropagation();
                this.toggleFavorite(wordText, button);
            }
            
            if (button.classList.contains('delete')) {
                e.preventDefault();
                e.stopPropagation();
                if (confirm(`–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ "${wordText}"?`)) {
                    this.deleteWord(wordText);
                }
            }
        });
    }

    // –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ª–æ–≤–∞
    pronounceWord(wordText) {
        if ('speechSynthesis' in window) {
            const utterance = new SpeechSynthesisUtterance(wordText);
            utterance.lang = 'en-US';
            utterance.rate = 0.9;
            speechSynthesis.speak(utterance);
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    toggleFavorite(wordText, button) {
        console.log('üåü toggleFavorite called for:', wordText);
        
        const word = this.words.find(w => w.text === wordText);
        if (word) {
            word.favorite = !word.favorite;
            button.classList.toggle('active', word.favorite);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ localStorage
            localStorage.setItem('cambridge_dictionary', JSON.stringify(this.words));
            
            console.log('‚úÖ Word favorite status updated:', wordText, 'favorite:', word.favorite);
            
            // –ù–û–í–û–ï: –ï—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å
            const filterSelect = document.getElementById('filterSelect');
            if (filterSelect && filterSelect.value === 'favorites') {
                // –ï—Å–ª–∏ —Å–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", —Å–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
                if (!word.favorite) {
                    const card = document.querySelector(`.word-card[data-word="${wordText}"]`);
                    if (card) {
                        card.style.display = 'none';
                    }
                    this.updateVisibleWordsCount();
                    this.updateCategoryVisibility();
                }
            }
        } else {
            console.error('‚ùå Word not found in words array:', wordText);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    initializeFavoriteButtons() {
        console.log('‚≠ê Initializing favorite buttons...');
        
        document.querySelectorAll('.action-button.favorite').forEach(button => {
            const wordCard = button.closest('.word-card');
            if (wordCard) {
                const wordText = wordCard.dataset.word;
                const word = this.words.find(w => w.text === wordText);
                
                // –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å active
                button.classList.remove('active');
                
                // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ —Å–ª–æ–≤–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
                if (word && word.favorite) {
                    button.classList.add('active');
                    console.log('üåü Found favorite word:', wordText);
                }
            }
        });
        
        console.log('‚úÖ Favorite buttons initialized');
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
    deleteWord(wordText) {
        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        delete this.wordStats[wordText];
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å–ª–æ–≤
        this.words = this.words.filter(w => w.text !== wordText);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        this.selectedWords.delete(wordText);
        
        // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ DOM
        const card = document.querySelector(`.word-card[data-word="${wordText}"]`);
        if (card) {
            card.remove();
        }
        
        this.saveWordStats();
        localStorage.setItem('cambridge_dictionary', JSON.stringify(this.words));
        this.updateStatistics();
        this.updateStudyButton();
        this.updateBatchActions();
        
        console.log('üóëÔ∏è Deleted word:', wordText);
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    setupFilters() {
        // –§–∏–ª—å—Ç—Ä –ø–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–º
        const filterSelect = document.getElementById('filterSelect');
if (filterSelect) {
    filterSelect.addEventListener('change', () => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        localStorage.setItem('cambridge_filter_favorites', filterSelect.value);
        this.filterByFavorites();
    });
}

        // –ü–æ–∏—Å–∫
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.addEventListener('input', () => {
                this.searchWords(searchInput.value);
            });
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—è–º
        const levelSelect = document.getElementById('levelSelect');
        if (levelSelect) {
            levelSelect.addEventListener('change', () => {
                this.filterByLevel(levelSelect.value);
            });
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        const sortSelect = document.getElementById('sortSelect');
        if (sortSelect) {
            sortSelect.addEventListener('change', () => {
                this.sortWords(sortSelect.value);
            });
        }

        // –°–∫—Ä—ã—Ç–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const filterCheckboxes = document.querySelectorAll('.filter-checkbox');
        filterCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                this.toggleElementVisibility(checkbox.dataset.target, checkbox.checked);
            });
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
    getWord(wordText) {
        return this.words.find(w => w.text === wordText);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–∑—É—á–µ–Ω–æ –ª–∏ —Å–ª–æ–≤–æ
    isWordLearned(wordText) {
        const stats = this.wordStats[wordText];
        return stats && stats.successfulAttempts >= 1;
    }
    addCategoryCheckboxes() {
        console.log('üìã Adding category checkboxes...');
        
        const categoryHeaders = document.querySelectorAll('.category-header');
        
        categoryHeaders.forEach(header => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —á–µ–∫–±–æ–∫—Å
            if (header.querySelector('.category-checkbox')) {
                return; // –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω
            }
            
            const categorySection = header.parentElement;
            const categoryData = categorySection.dataset.category || 'unknown';
            const categoryTitle = header.querySelector('.category-title');
            
            if (categoryTitle) {
                // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
                const leftContainer = document.createElement('div');
                leftContainer.style.cssText = `
                    display: flex;
                    align-items: center;
                    gap: 12px;
                    flex: 1;
                `;
                
                // –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.className = 'category-checkbox';
                checkbox.dataset.category = categoryData;
                checkbox.style.cssText = `
                    width: 18px;
                    height: 18px;
                    cursor: pointer;
                    accent-color: var(--accent-primary);
                    border-radius: 3px;
                `;
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                checkbox.addEventListener('change', (e) => {
                    e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    this.toggleCategorySelection(categoryData, checkbox.checked);
                });
                
                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
                const originalTitle = categoryTitle.textContent;
                categoryTitle.textContent = '';
                
                leftContainer.appendChild(checkbox);
                
                const titleSpan = document.createElement('span');
                titleSpan.textContent = originalTitle;
                titleSpan.style.cssText = `
                    font-size: 1.4rem;
                    font-weight: 700;
                    color: var(--card-text-primary);
                    cursor: pointer;
                `;
                
                // –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ - —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                titleSpan.addEventListener('click', (e) => {
                    e.stopPropagation();
                    toggleCategory(header);
                });
                
                leftContainer.appendChild(titleSpan);
                
                // –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π title –Ω–∞ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                header.replaceChild(leftContainer, categoryTitle);
            }
        });
        
        console.log('‚úÖ Category checkboxes added');
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —Å–ª–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    toggleCategorySelection(categoryData, isSelected) {
        console.log(`üìÇ Toggling category "${categoryData}" selection:`, isSelected);
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categorySection = document.querySelector(`.category-section[data-category="${categoryData}"]`);
        if (!categorySection) {
            console.warn('‚ùå Category section not found:', categoryData);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥–∏–º—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–ª–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const wordCards = categorySection.querySelectorAll('.word-card[data-word]');
        const visibleWordCards = Array.from(wordCards).filter(card => 
            card.style.display !== 'none'
        );
        
        console.log(`Found ${visibleWordCards.length} visible words in category "${categoryData}"`);
        
        let changedCount = 0;
        
        visibleWordCards.forEach(card => {
            const wordText = card.dataset.word;
            const checkbox = card.querySelector('.word-checkbox');
            
            if (checkbox && checkbox.checked !== isSelected) {
                checkbox.checked = isSelected;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
                if (isSelected) {
                    this.selectedWords.add(wordText);
                } else {
                    this.selectedWords.delete(wordText);
                }
                
                changedCount++;
            }
        });
        
        console.log(`‚úÖ Changed selection for ${changedCount} words in category "${categoryData}"`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateStudyButton();
        this.updateBatchActions();
        this.updateAllCategoryCheckboxes();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö —á–µ–∫–±–æ–∫—Å–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    updateAllCategoryCheckboxes() {
        const categoryCheckboxes = document.querySelectorAll('.category-checkbox');
        
        categoryCheckboxes.forEach(categoryCheckbox => {
            const categoryData = categoryCheckbox.dataset.category;
            const categorySection = document.querySelector(`.category-section[data-category="${categoryData}"]`);
            
            if (categorySection) {
                const visibleWordCards = Array.from(categorySection.querySelectorAll('.word-card[data-word]'))
                    .filter(card => card.style.display !== 'none');
                
                const selectedWordsInCategory = visibleWordCards.filter(card => {
                    const checkbox = card.querySelector('.word-checkbox');
                    return checkbox && checkbox.checked;
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if (selectedWordsInCategory.length === 0) {
                    categoryCheckbox.checked = false;
                    categoryCheckbox.indeterminate = false;
                } else if (selectedWordsInCategory.length === visibleWordCards.length) {
                    categoryCheckbox.checked = true;
                    categoryCheckbox.indeterminate = false;
                } else {
                    categoryCheckbox.checked = false;
                    categoryCheckbox.indeterminate = true;
                }
            }
        });
        this.updateCategoryVisibility();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    updateCategoryCheckboxState(wordCard) {
        const categorySection = wordCard.closest('.category-section');
        if (!categorySection) return;
        
        const categoryData = categorySection.dataset.category;
        const categoryCheckbox = categorySection.querySelector('.category-checkbox');
        if (!categoryCheckbox) return;
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥–∏–º—ã–µ —Å–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const visibleWordCards = Array.from(categorySection.querySelectorAll('.word-card[data-word]'))
            .filter(card => card.style.display !== 'none');
        
        const selectedWordsInCategory = visibleWordCards.filter(card => {
            const checkbox = card.querySelector('.word-checkbox');
            return checkbox && checkbox.checked;
        });
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (selectedWordsInCategory.length === 0) {
            // –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
            categoryCheckbox.checked = false;
            categoryCheckbox.indeterminate = false;
        } else if (selectedWordsInCategory.length === visibleWordCards.length) {
            // –í—Å–µ –≤—ã–±—Ä–∞–Ω–æ
            categoryCheckbox.checked = true;
            categoryCheckbox.indeterminate = false;
        } else {
            // –ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–±—Ä–∞–Ω–æ
            categoryCheckbox.checked = false;
            categoryCheckbox.indeterminate = true;
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
window.cambridgeApp = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('üåü DOM Content Loaded - Starting Cambridge Vocabulary');
    window.cambridgeApp = new CambridgeVocabulary();
});

// ===================================================================
// CAMBRIDGE VOCABULARY - –ß–ê–°–¢–¨ 2: –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø
// ===================================================================

Object.assign(CambridgeVocabulary.prototype, {

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    updateStatistics() {
        console.log('üìä Updating statistics...');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const studyingEl = document.getElementById('words-studying');
            const learnedEl = document.getElementById('words-learned');
            const averageEl = document.getElementById('average-pace');
            const streakEl = document.getElementById('daily-record');
            
            if (!studyingEl || !learnedEl || !averageEl || !streakEl) {
                console.warn('‚ö†Ô∏è Statistics elements not found');
                return;
            }

            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            let learnedCount = 0;
            let studyingCount = 0;
            
            this.words.forEach(word => {
                if (this.isWordLearned(word.text)) {
                    learnedCount++;
                } else {
                    studyingCount++;
                }
            });

            // –°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø –∏–∑—É—á–µ–Ω–∏—è
            const startDate = this.getStudyStartDate();
            const daysStudying = Math.max(1, Math.ceil((Date.now() - startDate.getTime()) / (1000 * 60 * 60 * 24)));
            const averagePace = learnedCount > 0 ? Math.round(learnedCount / daysStudying) : 0;

            // –î–Ω–∏ –ø–æ–¥—Ä—è–¥
            const streak = parseInt(localStorage.getItem('dailyStreak') || '0');

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            studyingEl.textContent = studyingCount;
            learnedEl.textContent = learnedCount;
            averageEl.textContent = averagePace;
            streakEl.textContent = streak;

            console.log('üìà Statistics updated:', {
                studying: studyingCount,
                learned: learnedCount,
                average: averagePace,
                streak: streak
            });

            this.updateSwitcherBadges();

        } catch (error) {
            console.error('‚ùå Error updating statistics:', error);
        }
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏–∑—É—á–µ–Ω–∏—è
    getStudyStartDate() {
        const stored = localStorage.getItem('studyStartDate');
        if (stored) {
            return new Date(stored);
        }
        
        const startDate = new Date();
        localStorage.setItem('studyStartDate', startDate.toISOString());
        return startDate;
    },

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É (–Ω–∞ –∏–∑—É—á–µ–Ω–∏–∏/–∏–∑—É—á–µ–Ω–æ)
    filterWordsByStatus() {
        console.log('üîç Filtering words by status:', this.currentFilter);
        
        try {
            const allWordCards = document.querySelectorAll('.word-card[data-word]');
            let visibleCount = 0;
            let hiddenCount = 0;
            
            allWordCards.forEach(card => {
                const wordText = card.dataset.word;
                if (!wordText) return;
                
                const isLearned = this.isWordLearned(wordText);
                let shouldShow = false;
                
                if (this.currentFilter === 'studying') {
                    shouldShow = !isLearned;
                } else if (this.currentFilter === 'learned') {
                    shouldShow = isLearned;
                }
                
                if (shouldShow) {
                    card.style.display = 'block';
                    card.style.opacity = '1';
                    visibleCount++;
                } else {
                    card.style.display = 'none';
                    card.style.opacity = '0';
                    hiddenCount++;
                }
            });
            
            console.log(`üëÅÔ∏è Visible: ${visibleCount}, Hidden: ${hiddenCount}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            const wordCountElement = document.querySelector('.word-count');
            if (wordCountElement) {
                wordCountElement.textContent = `${visibleCount} words`;
            }
            this.updateSwitcherBadges();
            
            // –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–∞
            this.clearSelection();
            
        } catch (error) {
            console.error('‚ùå Error filtering words:', error);
        }
    },

    updateWordCounts(visibleCount) {
    const wordCountElement = document.querySelector('.word-count');
    if (wordCountElement) {
        wordCountElement.textContent = `${visibleCount} words`;
    }
    
    this.updateSwitcherBadges();
},

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–π–¥–∂–µ–π
updateSwitcherBadges() {
    let studyingCount = 0;
    let learnedCount = 0;
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    this.words.forEach(word => {
        if (this.isWordLearned(word.text)) {
            learnedCount++;
        } else {
            studyingCount++;
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂–∏
    const studyingBadge = document.getElementById('studying-count');
    const learnedBadge = document.getElementById('learned-count');
    
        if (studyingBadge) {
            studyingBadge.textContent = studyingCount;
        }
        
        if (learnedBadge) {
            learnedBadge.textContent = learnedCount;
        }
        
        console.log('üìä Switcher badges updated:', { studying: studyingCount, learned: learnedCount });
    },

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–º
    filterByFavorites() {
        const filterSelect = document.getElementById('filterSelect');
        if (!filterSelect) return;
        
        const showOnlyFavorites = filterSelect.value === 'favorites';
        
        document.querySelectorAll('.word-card').forEach(card => {
            const wordText = card.dataset.word;
            const word = this.getWord(wordText);
            
            if (!word) return;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞
            const isLearned = this.isWordLearned(wordText);
            const matchesStatus = this.currentFilter === 'studying' ? !isLearned : isLearned;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            const matchesFavorites = !showOnlyFavorites || word.favorite;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            const searchInput = document.getElementById('searchInput');
            const searchTerm = searchInput ? searchInput.value.toLowerCase() : '';
            const cardWordText = wordText.toLowerCase();
            const translationElement = card.querySelector('.word-translation');
            const translation = translationElement ? translationElement.textContent.toLowerCase() : '';
            const matchesSearch = !searchTerm || cardWordText.includes(searchTerm) || translation.includes(searchTerm);
            
            const levelSelect = document.getElementById('levelSelect');
            const selectedLevel = levelSelect ? levelSelect.value : 'all';
            const cardLevel = card.dataset.level;
            const matchesLevel = selectedLevel === 'all' || cardLevel === selectedLevel;
            
            if (matchesStatus && matchesFavorites && matchesSearch && matchesLevel) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        this.updateCategoryVisibility();
        this.updateVisibleWordsCount();
        console.log('‚≠ê Filtered by favorites:', showOnlyFavorites);
    },

    // –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º
    searchWords(searchTerm) {
        const term = searchTerm.toLowerCase().trim();
        
        document.querySelectorAll('.word-card').forEach(card => {
            const wordText = card.dataset.word ? card.dataset.word.toLowerCase() : '';
            const translationElement = card.querySelector('.word-translation');
            const translation = translationElement ? translationElement.textContent.toLowerCase() : '';
            
            const matchesSearch = !term || wordText.includes(term) || translation.includes(term);
            
            // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            const isLearned = this.isWordLearned(card.dataset.word);
            const matchesStatus = this.currentFilter === 'studying' ? !isLearned : isLearned;
            
            const filterSelect = document.getElementById('filterSelect');
            const showOnlyFavorites = filterSelect && filterSelect.value === 'favorites';
            const word = this.getWord(card.dataset.word);
            const matchesFavorites = !showOnlyFavorites || (word && word.favorite);
            
            if (matchesSearch && matchesStatus && matchesFavorites) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
        
        this.updateVisibleWordsCount();
        console.log('üîé Search applied:', term);
    },

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º
    filterByLevel(level) {
        document.querySelectorAll('.word-card').forEach(card => {
            const cardLevel = card.dataset.level;
            const matchesLevel = level === 'all' || cardLevel === level;
            
            // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å, –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ –ø–æ–∏—Å–∫
            const isLearned = this.isWordLearned(card.dataset.word);
            const matchesStatus = this.currentFilter === 'studying' ? !isLearned : isLearned;
            
            const filterSelect = document.getElementById('filterSelect');
            const showOnlyFavorites = filterSelect && filterSelect.value === 'favorites';
            const word = this.getWord(card.dataset.word);
            const matchesFavorites = !showOnlyFavorites || (word && word.favorite);
            
            const searchInput = document.getElementById('searchInput');
            const searchTerm = searchInput ? searchInput.value.toLowerCase() : '';
            const wordText = card.dataset.word ? card.dataset.word.toLowerCase() : '';
            const translationElement = card.querySelector('.word-translation');
            const translation = translationElement ? translationElement.textContent.toLowerCase() : '';
            const matchesSearch = !searchTerm || wordText.includes(searchTerm) || translation.includes(searchTerm);
            
            if (matchesLevel && matchesStatus && matchesFavorites && matchesSearch) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
        
        this.updateVisibleWordsCount();
        this.updateCategoryVisibility();
        console.log('üìä Filtered by level:', level);
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    updateCategoryVisibility() {
    const categoryHeaders = document.querySelectorAll('.category-header');

    categoryHeaders.forEach(header => {
        const categorySection = header.parentElement;
        const countElement = header.querySelector('.category-count');

        // –ë–µ—Ä—ë–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const cards = categorySection.querySelectorAll('.word-card[data-word]');

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const filterSelect = document.getElementById('filterSelect');
        const showOnlyFavorites = filterSelect && filterSelect.value === 'favorites';
        const searchInput = document.getElementById('searchInput');
        const searchTerm = searchInput ? searchInput.value.toLowerCase() : '';
        const levelSelect = document.getElementById('levelSelect');
        const selectedLevel = levelSelect ? levelSelect.value : 'all';

        // –°—á—ë—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ –ò –≤—Å–µ–º —Ñ–∏–ª—å—Ç—Ä–∞–º
        let count = 0;
        cards.forEach(card => {
            const wordText = card.dataset.word;
            const isLearned = this.isWordLearned(wordText);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ (–∏–∑—É—á–µ–Ω–æ/–Ω–∞ –∏–∑—É—á–µ–Ω–∏–∏)
            let matchesStatus = true;
            if (this.currentFilter === 'learned') {
                matchesStatus = isLearned;
            } else if (this.currentFilter === 'studying') {
                matchesStatus = !isLearned;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            const word = this.getWord(wordText);
            const matchesFavorites = !showOnlyFavorites || (word && word.favorite);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫
            const cardWordText = wordText.toLowerCase();
            const translationElement = card.querySelector('.word-translation');
            const translation = translationElement ? translationElement.textContent.toLowerCase() : '';
            const matchesSearch = !searchTerm || cardWordText.includes(searchTerm) || translation.includes(searchTerm);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
            const cardLevel = card.dataset.level;
            const matchesLevel = selectedLevel === 'all' || cardLevel === selectedLevel;
            
            // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ª–æ–≤–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –í–°–ï —Ñ–∏–ª—å—Ç—Ä—ã
            if (matchesStatus && matchesFavorites && matchesSearch && matchesLevel) {
                count++;
            }
        });

        if (countElement) {
            countElement.textContent = count;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —Ü–µ–ª–∏–∫–æ–º —Å–µ–∫—Ü–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—Å—Ö–æ–¥—è –∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        categorySection.style.display = count === 0 ? 'none' : 'block';
    });

    console.log('üè∑Ô∏è Category visibility updated for current filters');
},

    // –ü–æ–¥—Å—á–µ—Ç –≤–∏–¥–∏–º—ã—Ö —Å–ª–æ–≤
    updateVisibleWordsCount() {
        const visibleCards = document.querySelectorAll('.word-card:not([style*="none"])');
        const count = visibleCards.length;
        
        this.updateWordCounts(count);
        return count;
    },

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤
    sortWords(sortBy) {
        const categoryContent = document.querySelector('.category-content .words-grid');
        if (!categoryContent) return;
        
        const wordCards = Array.from(categoryContent.querySelectorAll('.word-card'));
        
        wordCards.sort((a, b) => {
            const wordA = this.getWord(a.dataset.word);
            const wordB = this.getWord(b.dataset.word);
            
            if (!wordA || !wordB) return 0;
            
            switch (sortBy) {
                case 'alphabetical':
                    return wordA.text.localeCompare(wordB.text);
                case 'date':
                default:
                    return (wordB.dateAdded || 0) - (wordA.dateAdded || 0);
            }
        });
        
        // –ü–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ DOM
        wordCards.forEach(card => {
            categoryContent.appendChild(card);
        });
        
        console.log('üîÑ Words sorted by:', sortBy);
    },

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    toggleElementVisibility(targetSelector, isVisible) {
        const elements = document.querySelectorAll(targetSelector);
        
        elements.forEach(element => {
            if (element) {
                element.style.display = isVisible ? '' : 'none';
            }
        });
        
        console.log('üëÅÔ∏è Toggle visibility for', targetSelector, ':', isVisible);
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    updateTrainingStats(correctAnswers, totalQuestions, selectedWords) {
        try {
            console.log('üèãÔ∏è Updating training stats...');
            console.log(`üìä Results: ${correctAnswers}/${totalQuestions} correct`);
            
            const successRate = correctAnswers / totalQuestions;
            const successPercentage = Math.round(successRate * 100);
            
            console.log(`üìà Success rate: ${successPercentage}%`);
            
            const today = new Date().toDateString();

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç 90% –∏ –≤—ã—à–µ
            if (successRate >= 0.9) {
                console.log('üéâ Great result! Marking words as learned...');
                
                selectedWords.forEach(word => {
                    const wordText = word.text;
                    console.log(`‚úÖ Marking "${wordText}" as learned`);
                    
                    if (!this.wordStats[wordText]) {
                        this.wordStats[wordText] = {
                            successfulAttempts: 0,
                            learnedDate: null,
                            lastAttemptDate: null
                        };
                    }
                    
                    const stats = this.wordStats[wordText];
                    
                    // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–µ
                    if (stats.lastAttemptDate !== today || stats.successfulAttempts === 0) {
                        stats.successfulAttempts = Math.max(1, stats.successfulAttempts);
                        stats.lastAttemptDate = today;
                        
                        if (!stats.learnedDate) {
                            stats.learnedDate = today;
                        }
                    }
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º streak (–¥–Ω–∏ –ø–æ–¥—Ä—è–¥)
                this.updateStreakAfterTraining(today);
                
                this.saveWordStats();
                console.log('üíæ Word stats saved to localStorage');
                
            } else {
                console.log('üìö Result below 90%, words remain in studying');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            setTimeout(() => {
                this.updateStatistics();
                this.filterWordsByStatus();
                this.updateCategoryVisibility(); 
            }, 500);
            
            console.log('üéØ Training stats update completed');
            
        } catch (error) {
            console.error('‚ùå Error updating training stats:', error);
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ streak –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    updateStreakAfterTraining(today) {
        try {
            let streak = parseInt(localStorage.getItem('dailyStreak') || '0');
            const lastActiveDate = localStorage.getItem('lastActiveDate');

            if (!lastActiveDate) {
                streak = 1;
            } else {
                const lastDate = new Date(lastActiveDate);
                const currentDate = new Date(today);
                const diffDays = Math.floor((currentDate - lastDate) / (1000 * 60 * 60 * 24));

                if (diffDays === 0) {
                    // –£–∂–µ –∑–∞–Ω–∏–º–∞–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è
                } else if (diffDays === 1) {
                    streak += 1;
                } else {
                    streak = 1;
                }
            }

            localStorage.setItem('dailyStreak', streak.toString());
            localStorage.setItem('lastActiveDate', today);
            
            console.log(`üî• Streak updated: ${streak}`);
            
        } catch (error) {
            console.error('‚ùå Error updating streak:', error);
        }
    }
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
console.log('‚úÖ Statistics and filtering system loaded');

// ===================================================================
// CAMBRIDGE VOCABULARY - –ß–ê–°–¢–¨ 3: –°–ò–°–¢–ï–ú–ê –¢–†–ï–ù–ò–†–û–í–û–ö - –û–°–ù–û–í–ê
// ===================================================================

class WordTraining {
    constructor() {
        this.selectedWords = [];
        this.currentCardIndex = 0;
        this.isFlipped = false;
        this.count = 0;
        this.activeModesSequence = [];
        this.currentModeIndex = 0;
        this.trainingModes = {
            flashcards: true,
            memory: true,
            fillblanks: true,
            translation: true,
            matching: true,
            spelling: true
        };
        this.totalCorrectAnswers = 0;
        
        console.log('üéì WordTraining initialized');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    initialize(selectedWordsCount) {
        this.count = selectedWordsCount;
        this.createTrainingModal(selectedWordsCount);
        console.log('üéØ Training initialized with', selectedWordsCount, 'words');
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    createTrainingModal(selectedWordsCount) {
        const modal = document.createElement('div');
        modal.id = 'wordTrainingModal';
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        `;
    
        const modesCount = Object.values(this.trainingModes).filter(Boolean).length;
        let modeWord;
        if (modesCount === 1) {
            modeWord = '—Ä–µ–∂–∏–º';
        } else if (modesCount > 1 && modesCount < 5) {
            modeWord = '—Ä–µ–∂–∏–º–∞';
        } else {
            modeWord = '—Ä–µ–∂–∏–º–æ–≤';
        }

        modal.innerHTML = `
            <style>
                .mode-checkbox {
                    appearance: none !important;
                    width: 20px !important;
                    height: 20px !important;
                    border-radius: 4px;
                    background-color: var(--card-bg) !important;
                    cursor: pointer;
                    position: relative;
                    border: 2px solid var(--card-stroke) !important;
                    transition: all 0.3s ease !important;
                }

                .mode-checkbox:checked {
                    background-color: var(--accent-color) !important;
                    border-color: var(--accent-color) !important;
                }

                .mode-checkbox:checked::after {
                    content: '‚úì';
                    position: absolute;
                    color: white !important;
                    font-size: 14px;
                    left: 50%;
                    top: 45%;
                    transform: translate(-50%, -50%);
                }

                .mode-item {
                    display: flex;
                    align-items: center;
                    gap: 16px;
                    background: var(--card-bg-tertiary) !important;
                    padding: 16px;
                    border-radius: 8px;
                    opacity: 0.7;
                    transition: all 0.3s ease;
                    border: 1px solid transparent;
                    cursor: pointer;
                }

                .mode-item:hover {
                    opacity: 0.9;
                    background: var(--card-bg-secondary) !important;
                    border-color: var(--card-stroke-secondary) !important;
                }

                .mode-item.active {
                    opacity: 1 !important;
                    border-color: var(--accent-color) !important;
                    background: var(--card-hover-secondary) !important;
                }
                
                .settings-btn:hover {
                    color: var(--accent-color) !important;
                }
                .settings-btn:hover svg {
                    stroke: var(--accent-color) !important;
                }
            </style>
            <div style="background: #f8f9ff; width: 95vw; max-width: 600px; border-radius: 12px; padding: 24px; margin: 16px; display: flex; flex-direction: column; justify-content: center; align-items: center;">
                <button class="close-modal" style="position: absolute; top: 20px; right: 20px; color: var(--card-text-tertiary); background: none; border: none; font-size: 32px; cursor: pointer; padding: 8px;">√ó</button>
                
                <div style="text-align: center; max-width: 400px;">
                    <div style="display: flex; flex-direction: column; align-items: center; gap: 8px;">
                        <div style="position: relative; text-align: center;">
                            <span style="position: absolute; top: -60px; left: 50%; transform: translateX(-50%); font-size: 70px;">üìì</span>
                            <h2 style="font-size: 30px; font-weight: 700; color: var(--card-text-primary); margin-top: 45px;">Word Training</h2>
                        </div>
                        <p style="color: var(--card-text-tertiary); margin-top: 8px; font-size: 16px;">–°–ª–æ–≤ –Ω–∞ –∏–∑—É—á–µ–Ω–∏–∏: ${selectedWordsCount}</p>
                    </div>
                    
                    <div style="margin-top: 64px;">
                        <p style="color: var(--card-text-tertiary); margin-bottom: 24px; font-size: 16px;">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤</p>
                        
                        <div class="word-count-controls" style="display: flex; align-items: center; justify-content: center; gap: 24px; margin-bottom: 64px;">
                            <button class="minus-btn control-btn">-</button>
                            
                            <span class="word-count" style="font-size: 24px; color: var(--card-text-primary);">${selectedWordsCount}</span>
                            
                            <button class="plus-btn control-btn">+</button>
                        </div>

                        <button class="settings-btn" style="background: none; border: none; cursor: pointer; color: var(--card-text-tertiary); font-size: 18px; display: flex; align-items: center; gap: 8px; margin: 0 auto 64px; transition: all 0.3s ease;">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <circle cx="12" cy="12" r="3"></circle>
                                <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>
                            </svg>
                            ${Object.values(this.trainingModes).filter(Boolean).length} ${modeWord}
                        </button>

                        <button class="start-training-btn" style="background: var(--accent-color) !important; color: white !important; padding: 12px 32px; border-radius: 8px; border: none; cursor: pointer; font-size: 16px; width: 100%; transition: all 0.3s ease;">
                            –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
        this.addModalEventListeners(modal);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    addModalEventListeners(modal) {
        const self = this;
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.querySelector('.close-modal').addEventListener('click', () => {
            modal.remove();
        });

        // –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
        const minusBtn = modal.querySelector('.minus-btn');
        const plusBtn = modal.querySelector('.plus-btn');
        const wordCountSpan = modal.querySelector('.word-count');

        minusBtn.addEventListener('click', () => {
            if (self.count > 1) {
                self.count--;
                wordCountSpan.textContent = self.count;
            }
        });

        plusBtn.addEventListener('click', () => {
            if (self.count < parseInt(wordCountSpan.textContent)) {
                self.count++;
                wordCountSpan.textContent = self.count;
            }
        });

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–∂–∏–º–æ–≤
        modal.querySelector('.settings-btn').addEventListener('click', () => {
            self.createModesModal();
        });

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        modal.querySelector('.start-training-btn').addEventListener('click', () => {
            console.log('üöÄ Start training button clicked');
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            self.selectedWords = self.getSelectedWords();
            console.log('üìö Selected words for training:', self.selectedWords);
            
            if (!self.selectedWords || self.selectedWords.length === 0) {
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–ª–æ–≤–∞ –≤—ã–±—Ä–∞–Ω—ã.');
                return;
            }
            
            modal.remove();
            self.startTraining();
        });
    }

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    createModesModal() {
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1001;
        `;

        modal.innerHTML = `
            <div style="background: var(--card-bg); width: 600px; max-width: 90vw; border-radius: 12px; padding: 24px;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px;">
                    <h2 style="color: var(--card-text-primary); font-size: 24px;">–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–æ–≤</h2>
                    <button class="close-modes" style="color: var(--card-text-tertiary); background: none; border: none; font-size: 24px; cursor: pointer;">√ó</button>
                </div>

                <div style="display: flex; flex-direction: column; gap: 16px;">
                    <div class="mode-item" data-mode="flashcards">
                        <input type="checkbox" ${this.trainingModes.flashcards ? 'checked' : ''} class="mode-checkbox">
                        <div>
                            <h3 style="color: var(--card-text-primary); margin: 0 0 4px 0;">–§–ª–µ—à–∫–∞—Ä—Ç–æ—á–∫–∏</h3>
                            <p style="color: var(--card-text-tertiary); margin: 0; font-size: 14px;">–û–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –ª–µ–∫—Å–∏–∫–æ–π</p>
                        </div>
                    </div>

                    <div class="mode-item" data-mode="memory">
                        <input type="checkbox" ${this.trainingModes.memory ? 'checked' : ''} class="mode-checkbox">
                        <div>
                            <h3 style="color: var(--card-text-primary); margin: 0 0 4px 0;">Memory Game</h3>
                            <p style="color: var(--card-text-tertiary); margin: 0; font-size: 14px;">–ù–∞–π–¥–∏ –ø–∞—Ä—ã —Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥</p>
                        </div>
                    </div>

                    <div class="mode-item" data-mode="translation">
                        <input type="checkbox" ${this.trainingModes.translation ? 'checked' : ''} class="mode-checkbox">
                        <div>
                            <h3 style="color: var(--card-text-primary); margin: 0 0 4px 0;">–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞</h3>
                            <p style="color: var(--card-text-tertiary); margin: 0; font-size: 14px;">–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤–∞</p>
                        </div>
                    </div>

                    <div class="mode-item" data-mode="fillblanks">
                        <input type="checkbox" ${this.trainingModes.fillblanks ? 'checked' : ''} class="mode-checkbox">
                        <div>
                            <h3 style="color: var(--card-text-primary); margin: 0 0 4px 0;">Fill in the Blanks</h3>
                            <p style="color: var(--card-text-tertiary); margin: 0; font-size: 14px;">–ó–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö</p>
                        </div>
                    </div>

                    <div class="mode-item" data-mode="matching">
                        <input type="checkbox" ${this.trainingModes.matching ? 'checked' : ''} class="mode-checkbox">
                        <div>
                            <h3 style="color: var(--card-text-primary); margin: 0 0 4px 0;">–°–ª–æ–≤–µ—Å–Ω—ã–µ –ø–∞—Ä—ã</h3>
                            <p style="color: var(--card-text-tertiary); margin: 0; font-size: 14px;">–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ª–æ–≤ —Å –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è–º–∏</p>
                        </div>
                    </div>

                    <div class="mode-item" data-mode="spelling">
                        <input type="checkbox" ${this.trainingModes.spelling ? 'checked' : ''} class="mode-checkbox">
                        <div>
                            <h3 style="color: var(--card-text-primary); margin: 0 0 4px 0;">–°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ</h3>
                            <p style="color: var(--card-text-tertiary); margin: 0; font-size: 14px;">–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –±—É–∫–≤</p>
                        </div>
                    </div>
                </div>

                <div style="margin-top: 24px; display: flex; justify-content: center; gap: 16px;">
                    <button class="cancel-modes" style="padding: 12px 32px; border-radius: 8px; border: 1px solid var(--card-stroke); cursor: pointer; font-size: 16px; background: var(--card-bg-secondary); color: var(--card-text-primary); transition: all 0.3s ease;">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button class="save-modes" style="padding: 12px 32px; border-radius: 8px; border: none; cursor: pointer; font-size: 16px; background: var(--accent-color); color: white; transition: all 0.3s ease;">
                        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
        this.addModesModalEventListeners(modal);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–∂–∏–º–æ–≤
    addModesModalEventListeners(modal) {
        const self = this;
        
        // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Ä–µ–∂–∏–º–æ–≤
        const updateModeCount = () => {
            const selectedModes = Object.values(self.trainingModes).filter(Boolean).length;
            const settingsBtn = document.querySelector('.settings-btn');
            if (settingsBtn) {
                const modeWord = selectedModes === 1 ? '—Ä–µ–∂–∏–º' : (selectedModes >= 2 && selectedModes <= 4 ? '—Ä–µ–∂–∏–º–∞' : '—Ä–µ–∂–∏–º–æ–≤');
                settingsBtn.innerHTML = `
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="3"></circle>
                        <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>
                    </svg>
                    ${selectedModes} ${modeWord}
                `;
            }
        };

        // –ö–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.querySelectorAll('.close-modes, .cancel-modes').forEach(button => {
            button.addEventListener('click', () => modal.remove());
        });

        // –†–µ–∂–∏–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        const modeItems = modal.querySelectorAll('.mode-item[data-mode]');
        modeItems.forEach(item => {
            const checkbox = item.querySelector('.mode-checkbox');
            const mode = item.dataset.mode;

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            checkbox.checked = self.trainingModes[mode];
            if (checkbox.checked) item.classList.add('active');

            const toggleMode = () => {
                if (checkbox.checked) {
                    item.classList.add('active');
                } else {
                    item.classList.remove('active');
                }
                self.trainingModes[mode] = checkbox.checked;
                updateModeCount();
            };

            checkbox.addEventListener('change', toggleMode);
            
            // –ö–ª–∏–∫ –ø–æ –≤—Å–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
            item.addEventListener('click', (e) => {
                if (e.target !== checkbox) {
                    checkbox.checked = !checkbox.checked;
                    toggleMode();
                }
            });
        });

        // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        modal.querySelector('.save-modes').addEventListener('click', () => {
            let hasSelectedMode = false;
            
            modeItems.forEach(item => {
                const mode = item.dataset.mode;
                const checkbox = item.querySelector('.mode-checkbox');
                self.trainingModes[mode] = checkbox.checked;
                if (checkbox.checked) hasSelectedMode = true;
            });

            if (!hasSelectedMode) {
                // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤, –≤–∫–ª—é—á–∞–µ–º —Ñ–ª–µ—à–∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                self.trainingModes.flashcards = true;
            }

            updateModeCount();
            modal.remove();
        });
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    getSelectedWords() {
        console.log('üìö Getting selected words...');
        
        if (!window.cambridgeApp) {
            console.error('‚ùå CambridgeApp not found');
            return [];
        }
        
        const selectedWordsArray = Array.from(window.cambridgeApp.selectedWords);
        const wordsForTraining = window.cambridgeApp.words.filter(word => 
            selectedWordsArray.includes(word.text)
        ).slice(0, this.count).map(word => ({
            text: word.text,
            translation: word.translation,
            phonetics: word.phonetics,
            type: word.type,
            category: word.category,
            level: word.level,
            // –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –ò–ó data-image-url
            imageUrl: this.getWordImageUrl(word.text)
        }));
        
        console.log('‚úÖ Words selected for training:', wordsForTraining.length);
        return wordsForTraining;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–æ–≤–∞
    getWordImageUrl(wordText) {
        const wordCard = document.querySelector(`.word-card[data-word="${wordText}"]`);
        return wordCard ? wordCard.dataset.imageUrl : null;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    createProgressIndicator(currentMode, currentStep, totalSteps) {
        const totalModes = this.activeModesSequence.length;
        const currentModeIndex = this.activeModesSequence.indexOf(currentMode) + 1;
        
        return `
            <div style="width: 100%; margin-bottom: 24px;">
                <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                    <span style="color: var(--card-text-tertiary); font-size: 14px;">–†–µ–∂–∏–º ${currentModeIndex} –∏–∑ ${totalModes}</span>
                    <span style="color: var(--card-text-tertiary); font-size: 14px;">${currentStep}/${totalSteps}</span>
                </div>
                <div style="width: 100%; height: 4px; background: #e8ecff; border-radius: 2px;">
                    <div style="width: ${(currentStep / totalSteps) * 100}%; height: 100%; background: var(--accent-color); border-radius: 2px; transition: width 0.3s ease;"></div>
                </div>
            </div>
        `;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    getRandomTranslations(currentWord) {
        const otherWords = this.selectedWords.filter(word => word.text !== currentWord.text);
        const shuffled = otherWords.sort(() => 0.5 - Math.random());
        return shuffled.slice(0, 2).map(word => word.translation);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
window.wordTraining = new WordTraining();

console.log('‚úÖ WordTraining system loaded');

// ===================================================================
// CAMBRIDGE VOCABULARY - –ß–ê–°–¢–¨ 4: –°–ò–°–¢–ï–ú–ê –¢–†–ï–ù–ò–†–û–í–û–ö - –†–ï–ñ–ò–ú–´
// ===================================================================

// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ WordTraining —Ä–µ–∂–∏–º–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
Object.assign(WordTraining.prototype, {

    // –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    startTraining() {
        console.log('üöÄ Starting training with words:', this.selectedWords);
        
        if (!this.selectedWords || this.selectedWords.length === 0) {
            console.error('‚ùå No words available for training');
            alert('–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            return;
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        this.activeModesSequence = [];
        if (this.trainingModes.flashcards) this.activeModesSequence.push('flashcards');
        if (this.trainingModes.memory) this.activeModesSequence.push('memory');
        if (this.trainingModes.translation) this.activeModesSequence.push('translation');
        if (this.trainingModes.fillblanks) this.activeModesSequence.push('fillblanks');
        if (this.trainingModes.matching) this.activeModesSequence.push('matching');
        if (this.trainingModes.spelling) this.activeModesSequence.push('spelling');

        console.log('üìã Active modes:', this.activeModesSequence);
        
        if (this.activeModesSequence.length === 0) {
            console.log('‚ö†Ô∏è No training modes selected, defaulting to flashcards');
            this.activeModesSequence = ['flashcards'];
            this.trainingModes.flashcards = true;
        }
        
        this.currentModeIndex = 0;
        this.totalCorrectAnswers = 0;
        this.startNextMode();
    },

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–µ–∂–∏–º—É
    startNextMode() {
        this.currentCardIndex = 0;
        this.isFlipped = false;

        const nextMode = this.activeModesSequence[this.currentModeIndex];
        console.log('üéØ Starting mode:', nextMode, `(${this.currentModeIndex + 1}/${this.activeModesSequence.length})`);

        if (!nextMode) {
            console.log('üèÅ All modes completed, showing completion modal');
            this.showCompletionModal();
            return;
        }

        switch (nextMode) {
            case 'flashcards':
                this.createFlashcardsModal();
                break;
            case 'memory':
                this.createMemoryGameModal();
                break;
            case 'translation':
                this.createTranslationQuizModal();
                break;
            case 'fillblanks': 
                this.createFillBlanksModal();
                break;
            case 'matching':
                this.createMatchingModal();
                break;
            case 'spelling': 
                this.createSpellingModal();
                break;
            default:
                this.currentModeIndex++;
                this.startNextMode();
        }
    },

    // –†–ï–ñ–ò–ú: –§–ª–µ—à–∫–∞—Ä—Ç–æ—á–∫–∏
    createFlashcardsModal() {
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1002;
        `;

        const updateCardContent = () => {
            modal.innerHTML = this.createFlashcardHTML(
                this.selectedWords[this.currentCardIndex],
                this.currentCardIndex,
                this.selectedWords.length
            );
            this.addFlashcardEventListeners(modal);
        };

        updateCardContent();
        document.body.appendChild(modal);

        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
        window.updateCard = (newIndex) => {
            if (newIndex >= 0 && newIndex < this.selectedWords.length) {
                this.currentCardIndex = newIndex;
                this.isFlipped = false;
                updateCardContent();
            }
        };
    },

    // HTML –¥–ª—è —Ñ–ª–µ—à–∫–∞—Ä—Ç–æ—á–∫–∏
    createFlashcardHTML(word, index, total) {
        return `
            <div style="background: #f8f9ff; width: 95vw; height: 90vh; border-radius: 12px; padding: 24px; margin: 16px; display: flex; flex-direction: column; box-sizing: border-box;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px; box-sizing: border-box;">
                    <h2 style="color: var(--card-text-primary); font-size: 24px; margin: 0; box-sizing: border-box;">–§–ª–µ—à–∫–∞—Ä—Ç–æ—á–∫–∏ (${index + 1}/${total})</h2>
                    <button class="close-flashcards" style="color: var(--card-text-tertiary); background: none; border: none; font-size: 24px; cursor: pointer; padding: 8px; transition: all 0.3s ease; box-sizing: border-box;">√ó</button>
                </div>
                
                <div style="width: 100%; margin-bottom: 24px;">
                    <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                        <span style="color: var(--card-text-tertiary); font-size: 14px;">–†–µ–∂–∏–º 1 –∏–∑ ${this.activeModesSequence.length}</span>
                        <span style="color: var(--card-text-tertiary); font-size: 14px;">${index + 1}/${total}</span>
                    </div>
                    <div style="width: 100%; height: 4px; background: #e8ecff; border-radius: 2px;">
                        <div style="width: ${((index + 1) / total) * 100}%; height: 100%; background: var(--accent-color); border-radius: 2px; transition: width 0.3s ease;"></div>
                    </div>
                </div>

                <div class="flashcard-container" style="flex: 1; display: flex; align-items: center; justify-content: center; perspective: 1000px;">
                    <div style="position: relative; width: 100%; height: 400px;">
                        <div style="position: absolute; top: 8px; left: 4px; right: -4px; height: 400px; background: var(--card-bg-tertiary); border-radius: 12px; transform: scale(0.98);"></div>
                        <div style="position: absolute; top: 4px; left: 2px; right: -2px; height: 400px; background: var(--card-bg-secondary); border-radius: 12px; transform: scale(0.99);"></div>

                        <div class="flashcard" style="position: relative; width: 100%; height: 400px; background: var(--card-bg-secondary); border-radius: 12px; cursor: pointer; transition: transform 0.6s; transform-style: preserve-3d; border: 2px solid var(--card-stroke-secondary);">
            
                            <!-- –ü–µ—Ä–µ–¥–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ (—Å–ª–æ–≤–æ) -->
                            <div class="card-front" style="position: absolute; width: 100%; height: 100%; backface-visibility: hidden; display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 20px;">
                                <h3 style="color: var(--card-text-primary); font-size: 32px; margin-bottom: 16px;">${word.text}</h3>
                                <p style="color: var(--card-text-tertiary); font-size: 20px;">${word.phonetics || ''}</p>
                            
                                <button class="pronounce-btn" 
                                    style="background: none; border: 1px solid var(--accent-color); color: var(--accent-color); padding: 8px 16px; border-radius: 8px; cursor: pointer; margin-top: 16px; display: flex; align-items: center; gap: 8px; transition: all 0.3s ease;">

                                    <img src="assets/img/Volume Small.svg" alt="play sound" 
                                        style="width: 20px; height: 20px;">

                                    –ü—Ä–æ—Å–ª—É—à–∞—Ç—å
                                </button>

                                <!-- –ü–æ–¥–ø–∏—Å—å –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ -->
                                <div style="position: absolute; bottom: 20px; left: 50%; transform: translateX(-50%); display: flex; align-items: center; color: var(--card-text-tertiary); font-size: 14px; background: rgba(255, 255, 255, 0.1); padding: 8px 16px; border-radius: 20px; backdrop-filter: blur(10px);">
                                    <span style="margin-right: 8px;">‚Üª</span>
                                    –ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å
                                </div>
                            </div>

                            <!-- –ó–∞–¥–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ (–ø–µ—Ä–µ–≤–æ–¥ + –∫–∞—Ä—Ç–∏–Ω–∫–∞) -->
                            <div class="card-back" style="position: absolute; width: 100%; height: 100%; backface-visibility: hidden; transform: rotateY(180deg); display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 20px; gap: 0px;">
                                <!-- –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–ª–æ–≤–∞ -->
                                <div style="display: flex; align-items: center; justify-content: center; margin-bottom: 0px;">
                                    <img src="${word.imageUrl || 'assets/img/default-word.svg'}" 
                                        alt="${word.text}" 
                                        style="width: 250px; height: 250px; object-fit: contain; filter: drop-shadow(0 4px 8px rgba(0,0,0,0.1));">
                                </div>
                                
                                <!-- –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ -->
                                <h3 style="color: var(--card-text-primary); font-size: 32px; text-align: center; margin: 0;">${word.translation}</h3>
                                
                                <!-- –ü–æ–¥–ø–∏—Å—å –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ -->
                                <div style="position: absolute; bottom: 20px; left: 50%; transform: translateX(-50%); display: flex; align-items: center; color: var(--card-text-tertiary); font-size: 14px; background: rgba(255, 255, 255, 0.1); padding: 8px 16px; border-radius: 20px; backdrop-filter: blur(10px);">
                                    <span style="margin-right: 8px;">‚Üª</span>
                                    –ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –í–ø–µ—Ä–µ–¥/–ù–∞–∑–∞–¥ -->
                <div style="text-align: center; margin-top: 20px;">
                    <div style="display: flex; justify-content: center; align-items: center; gap: 16px;">
                        <button class="nav-btn prev-btn" ${index === 0 ? 'disabled' : ''} 
                            style="padding: 12px 24px; font-size:16px; border-radius: 8px; border: 1px solid var(--card-stroke); cursor: pointer; transition: all 0.3s ease; background: var(--card-bg-secondary); color: var(--card-text-primary); ${index === 0 ? 'opacity: 0.5; cursor: not-allowed;' : ''}">
                            –ù–∞–∑–∞–¥
                        </button>
                        
                        <button class="nav-btn next-btn" 
                            style="display: flex; align-items: center; font-size:16px; gap: 8px; justify-content: center; padding: 12px 24px; border-radius: 8px; border: none; cursor: pointer; background: var(--accent-color); color: white; transition: all 0.3s ease;">
                            ${index === total - 1 ? '–í–ø–µ—Ä–µ–¥' : '–í–ø–µ—Ä–µ–¥'}
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M5 12h14M12 5l7 7-7 7"/>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        `;
    },

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–ª–µ—à–∫–∞—Ä—Ç–æ—á–µ–∫
    addFlashcardEventListeners(modal) {
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.querySelector('.close-flashcards').addEventListener('click', () => {
            modal.remove();
            this.currentModeIndex++;
            this.startNextMode();
        });

        // –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
        const flashcard = modal.querySelector('.flashcard');
        if (flashcard) {
            flashcard.addEventListener('click', () => {
                this.isFlipped = !this.isFlipped;
                flashcard.style.transform = this.isFlipped ? 'rotateY(180deg)' : '';
            });
        }

        // –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ
        const pronounceBtn = modal.querySelector('.pronounce-btn');
        if (pronounceBtn) {
            pronounceBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                const utterance = new SpeechSynthesisUtterance(this.selectedWords[this.currentCardIndex].text);
                utterance.lang = 'en-US';
                utterance.rate = 0.9;
                window.speechSynthesis.speak(utterance);
            });
        }

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        const prevBtn = modal.querySelector('.prev-btn');
        const nextBtn = modal.querySelector('.next-btn');

        if (prevBtn && !prevBtn.disabled) {
            prevBtn.addEventListener('click', () => {
                if (this.currentCardIndex > 0) {
                    window.updateCard(this.currentCardIndex - 1);
                }
            });
        }

        if (nextBtn) {
            nextBtn.addEventListener('click', () => {
                if (this.currentCardIndex < this.selectedWords.length - 1) {
                    window.updateCard(this.currentCardIndex + 1);
                } else {
                    modal.remove();
                    this.currentModeIndex++;
                    this.startNextMode();
                }
            });
        }
    },

    //// –†–ï–ñ–ò–ú: Memory Game 
    createMemoryGameModal() {
        let flippedCards = [];
        let matchedCards = new Set();
        let correctMatches = 0;
        let moves = 0;
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫
        const cards = [];
        this.selectedWords.forEach((word, index) => {
            // –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
            cards.push({
                id: `translation-${index}`,
                type: 'translation',
                content: word.translation,
                matchId: index
            });
            
            // –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Å–ª–æ–≤–æ–º
            cards.push({
                id: `word-${index}`,
                type: 'word',
                content: word.text,
                image: word.imageUrl || word.image || `https://via.placeholder.com/100x80?text=${word.text}`,
                matchId: index
            });
        });
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        const shuffledCards = cards.sort(() => Math.random() - 0.5);
        
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1002;
        `;

        modal.innerHTML = `
            <div style="background: #f8f9ff; width: 95vw; height: 90vh; border-radius: 12px; padding: 24px; margin: 16px; display: flex; flex-direction: column; box-sizing: border-box;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px; box-sizing: border-box;">
                    <h2 style="color: var(--card-text-primary); font-size: 24px; margin: 0; box-sizing: border-box;">Memory Game</h2>
                    <button class="close-memory" style="color: var(--card-text-tertiary); background: none; border: none; font-size: 24px; cursor: pointer; padding: 8px; transition: all 0.3s ease; box-sizing: border-box;">√ó</button>
                </div>
                
                <div style="width: 100%; margin-bottom: 24px;">
                    <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                        <span style="color: var(--card-text-tertiary); font-size: 14px;">–†–µ–∂–∏–º 2 –∏–∑ 6</span>
                        <span style="color: var(--card-text-tertiary); font-size: 14px;">0/1</span>
                    </div>
                    <div style="width: 100%; height: 4px; background: #e8ecff; border-radius: 2px;">
                        <div style="width: 0%; height: 100%; background: var(--accent-color); border-radius: 2px; transition: width 0.3s ease;"></div>
                    </div>
                </div>

                <div style="flex: 1; display: flex; flex-wrap: wrap; justify-content: center; align-content: flex-start; gap: 16px; padding: 20px; overflow-y: auto; overflow-x: hidden; max-width: 100%;">
                    ${shuffledCards.map(card => `
                        <div class="memory-card" data-id="${card.id}" data-match-id="${card.matchId}">
                            <div class="memory-card-inner">
                                <div class="memory-card-back">
                                    <img src="assets/img/thinking.svg" alt="–î—É–º–∞—é..." class="thinking-icon" style="width: 200px; height: 200px; object-fit: contain;">
                                </div>
                                <div class="memory-card-front">
                                    ${card.type === 'word' ? `
                                        <img src="${card.image}" alt="${card.content}" class="memory-card-image">
                                        <span class="memory-card-text-word">${card.content}</span>
                                    ` : `
                                        <span class="memory-card-text-translation">${card.content}</span>
                                    `}
                                </div>
                            </div>
                        </div>
                    `).join('')}
                </div>
                
                <!-- –ù–æ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –í–ø–µ—Ä–µ–¥/–ù–∞–∑–∞–¥ -->
                <div style="text-align: center; margin-top: 20px;">
                    <div style="display: flex; justify-content: center; align-items: center; gap: 16px;">
                        <button class="nav-btn memory-prev-btn" ${this.currentModeIndex === 0 ? 'disabled' : ''}
                        style="display: flex; align-items: center; gap: 8px; justify-content: center; padding: 12px 24px; font-size:16px; border-radius: 8px; border: 1px solid var(--card-stroke); cursor: pointer; transition: all 0.3s ease; background: var(--card-bg-secondary); color: var(--card-text-primary); ${this.currentModeIndex === 0 ? 'opacity: 0.5; cursor: not-allowed;' : ''}">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M19 12H5M12 19l-7-7 7-7"/>
                        </svg>
                        –ù–∞–∑–∞–¥
                        </button>
                        
                        <button class="memory-next-btn" disabled 
                            style="display: flex; align-items: center; gap: 8px; justify-content: center; padding: 12px 24px; border-radius: 8px; border: none; cursor: pointer; background: var(--accent-color); color: white; transition: all 0.3s ease; opacity: 0.5;">
                            ${this.currentModeIndex === this.activeModesSequence.length - 1 ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å' : '–í–ø–µ—Ä–µ–¥'}
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M5 12h14M12 5l7 7-7 7"/>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        modal.querySelector('.close-memory').addEventListener('click', () => {
            modal.remove();
            this.currentModeIndex++;
            this.startNextMode();
        });

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ä–µ–∂–∏–º—É
        const prevBtn = modal.querySelector('.memory-prev-btn');
        if (prevBtn && !prevBtn.disabled) {
            prevBtn.addEventListener('click', () => {
                modal.remove();
                this.currentModeIndex--;
                this.startNextMode();
            });
        }

        // –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
        const memoryCards = modal.querySelectorAll('.memory-card');
        const nextBtn = modal.querySelector('.memory-next-btn');
        const progressBar = modal.querySelector('[style*="background: var(--accent-color)"]');

        memoryCards.forEach(card => {
            card.addEventListener('click', () => {
                // –ó–∞–ø—Ä–µ—â–∞–µ–º –∫–ª–∏–∫ —Ç–æ–ª—å–∫–æ –Ω–∞ —É–∂–µ —Å–æ–≤–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                if (card.classList.contains('matched')) {
                    return;
                }

                // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞, –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                if (card.classList.contains('flipped')) {
                    card.classList.remove('flipped');
                    // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
                    const index = flippedCards.indexOf(card);
                    if (index > -1) {
                        flippedCards.splice(index, 1);
                    }
                    return;
                }

                // –ï—Å–ª–∏ —É–∂–µ 2 –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã, –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å —Ç—Ä–µ—Ç—å—é
                if (flippedCards.length >= 2) {
                    return;
                }

                // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
                card.classList.add('flipped');
                flippedCards.push(card);

                if (flippedCards.length === 2) {
                    moves++;

                    const card1 = flippedCards[0];
                    const card2 = flippedCards[1];
                    const match1 = card1.dataset.matchId;
                    const match2 = card2.dataset.matchId;

                    if (match1 === match2) {
                        // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ
                        setTimeout(() => {
                            card1.classList.add('matched');
                            card2.classList.add('matched');
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å matched –∫ front —ç–ª–µ–º–µ–Ω—Ç–∞–º
                            card1.querySelector('.memory-card-front').classList.add('matched');
                            card2.querySelector('.memory-card-front').classList.add('matched');
                            
                            matchedCards.add(match1);
                            correctMatches++;
                            
                            if (progressBar) {
                                progressBar.style.width = `${(correctMatches / this.selectedWords.length) * 100}%`;
                            }

                            if (correctMatches === this.selectedWords.length) {
                                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–í–ø–µ—Ä–µ–¥" –∫–æ–≥–¥–∞ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                                nextBtn.disabled = false;
                                nextBtn.style.opacity = '1';
                                nextBtn.style.cursor = 'pointer';
                                this.totalCorrectAnswers += correctMatches;
                            }

                            flippedCards = [];
                        }, 500);
                    } else {
                        // –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
                        setTimeout(() => {
                            card1.classList.remove('flipped');
                            card2.classList.remove('flipped');
                            flippedCards = [];
                        }, 1000);
                    }
                }
            });
        });

        nextBtn.addEventListener('click', () => {
            if (!nextBtn.disabled) {
                modal.remove();
                this.currentModeIndex++;
                this.startNextMode();
            }
        });
    },

    // –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ä–µ–∂–∏–º—É
    startPreviousMode() {
        if (this.currentModeIndex > 0) {
            this.currentModeIndex--;
            this.currentCardIndex = 0;
            this.isFlipped = false;
            
            const prevMode = this.activeModesSequence[this.currentModeIndex];
            console.log('üéØ Going back to mode:', prevMode, `(${this.currentModeIndex + 1}/${this.activeModesSequence.length})`);

            switch (prevMode) {
                case 'flashcards':
                    this.createFlashcardsModal();
                    break;
                case 'memory':
                    this.createMemoryGameModal();
                    break;
                case 'translation':
                    this.createTranslationQuizModal();
                    break;
                case 'fillblanks': 
                    this.createFillBlanksModal();
                    break;
                case 'matching':
                    this.createMatchingModal();
                    break;
                case 'spelling': 
                    this.createSpellingModal();
                    break;
            }
        }
    },

    // –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ä–µ–∂–∏–º—É
    startPreviousMode() {
        if (this.currentModeIndex > 0) {
            this.currentModeIndex--;
            this.currentCardIndex = 0;
            this.isFlipped = false;
            
            const prevMode = this.activeModesSequence[this.currentModeIndex];
            console.log('üéØ Going back to mode:', prevMode, `(${this.currentModeIndex + 1}/${this.activeModesSequence.length})`);

            switch (prevMode) {
                case 'flashcards':
                    this.createFlashcardsModal();
                    break;
                case 'memory':
                    this.createMemoryGameModal();
                    break;
                case 'translation':
                    this.createTranslationQuizModal();
                    break;
                case 'fillblanks': 
                    this.createFillBlanksModal();
                    break;
                case 'matching':
                    this.createMatchingModal();
                    break;
                case 'spelling': 
                    this.createSpellingModal();
                    break;
            }
        }
    },

    // –†–ï–ñ–ò–ú: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
    createTranslationQuizModal() {
        let currentIndex = 0;
        let correctAnswers = 0;

        const createQuizHTML = (word, index, total) => {
            const randomTranslations = this.getRandomTranslations(word);
            const allTranslations = [...randomTranslations, word.translation]
                .sort(() => 0.5 - Math.random());

            return `
                <div style="background: #f8f9ff; width: 95vw; height: 90vh; border-radius: 12px; padding: 24px; margin: 16px; display: flex; flex-direction: column; box-sizing: border-box;">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px; box-sizing: border-box;">
                        <h2 style="color: var(--card-text-primary); font-size: 24px; margin: 0; box-sizing: border-box;">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ (${index + 1}/${total})</h2>
                        <button class="close-quiz" style="color: var(--card-text-tertiary); background: none; border: none; font-size: 24px; cursor: pointer; box-sizing: border-box;">√ó</button>
                    </div>

                    ${this.createProgressIndicator('translation', index + 1, total)}

                    <div style="flex: 1; display: flex; flex-direction: column; justify-content: center; align-items: center; gap: 32px; box-sizing: border-box;">
                        <div style="text-align: center; box-sizing: border-box;">
                            <h3 style="color: var(--card-text-primary); font-size: 36px; margin-bottom: 16px; box-sizing: border-box;">${word.text}</h3>
                            <p style="color: var(--card-text-tertiary); font-size: 20px; box-sizing: border-box;">${word.phonetics || ''}</p>
                        </div>

                        <div style="display: flex; flex-direction: column; gap: 16px; width: 100%; max-width: 400px; box-sizing: border-box;">
                            ${allTranslations.map(translation => `
                                <button class="translation-option" data-translation="${translation}" 
                                    style="padding: 20px; background: var(--card-bg); border: 2px solid var(--card-stroke-secondary); border-radius: 12px; color: var(--card-text-primary); font-size: 18px; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); box-sizing: border-box;">
                                    ${translation}
                                </button>
                            `).join('')}
                        </div>
                    </div>

                    <!-- –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É -->
                    <div style="display: flex; justify-content: center; align-items: center; margin-top: auto; padding-top: 20px; box-sizing: border-box;">
                        <div style="display: flex; gap: 12px; box-sizing: border-box;">
                            <button class="quiz-prev-btn" ${this.currentModeIndex === 0 ? 'disabled' : ''} 
                                style="display: flex; align-items: center; gap: 8px; justify-content: center; padding: 12px 24px; border-radius: 8px; border: none; cursor: pointer; background: var(--card-bg); color: var(--card-text-primary); transition: all 0.3s ease; font-size: 16px; ${this.currentModeIndex === 0 ? 'opacity: 0.5; cursor: not-allowed;' : ''}">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M19 12H5M12 19l-7-7 7-7"/>
                                </svg>
                                –ù–∞–∑–∞–¥
                            </button>
                            
                            <button class="quiz-next-btn" disabled 
                                style="display: flex; align-items: center; gap: 8px; justify-content: center; padding: 12px 24px; border-radius: 8px; border: none; cursor: pointer; background: var(--accent-color); color: white; transition: all 0.3s ease; opacity: 0.5; font-size: 16px;">
                                ${this.currentModeIndex === this.activeModesSequence.length - 1 ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å' : '–í–ø–µ—Ä–µ–¥'}
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M5 12h14M12 5l7 7-7 7"/>
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            `;
        };

        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1002;
        `;

        const updateQuiz = () => {
            modal.innerHTML = createQuizHTML(
                this.selectedWords[currentIndex],
                currentIndex,
                this.selectedWords.length
            );

            // –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            const style = document.createElement('style');
            style.textContent = `
                .translation-correct {
                    background: linear-gradient(135deg, #a8e6b7 0%, #c8f7d0 100%) !important;
                    border: 2px solid #8dd99f !important;
                    color: #2d5a3d !important;
                    box-shadow: 0 4px 20px rgba(141, 217, 159, 0.3) !important;
                }
                .translation-incorrect {
                    background: #e74c3c !important;
                    border: 2px solid #e74c3c !important;
                    color: white !important;
                }
            `;
            document.head.appendChild(style);

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
            modal.querySelector('.close-quiz').addEventListener('click', () => {
                this.totalCorrectAnswers += correctAnswers;
                modal.remove();
                this.currentModeIndex++;
                this.startNextMode();
            });

            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ä–µ–∂–∏–º—É
            const prevBtn = modal.querySelector('.quiz-prev-btn');
            if (prevBtn && !prevBtn.disabled) {
                prevBtn.addEventListener('click', () => {
                    modal.remove();
                    this.currentModeIndex--;
                    this.startNextMode();
                });
            }

            // –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" - –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
            const nextBtn = modal.querySelector('.quiz-next-btn');

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –æ—Ç–≤–µ—Ç–æ–≤
            const options = modal.querySelectorAll('.translation-option');
            
            options.forEach(option => {
                option.addEventListener('mouseover', () => {
                    if (!option.disabled) {
                        option.style.borderColor = 'var(--accent-color)';
                        option.style.transform = 'translateY(-2px)';
                        option.style.boxShadow = '0 4px 16px rgba(102, 126, 234, 0.3)';
                    }
                });
                
                option.addEventListener('mouseout', () => {
                    if (!option.disabled) {
                        option.style.borderColor = 'var(--card-stroke-secondary)';
                        option.style.transform = 'translateY(0)';
                        option.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.1)';
                    }
                });
                
                option.addEventListener('click', () => {
                    if (option.disabled) return;
                    
                    const isCorrect = option.dataset.translation === this.selectedWords[currentIndex].translation;
                    
                    // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ —Å—Ç–∏–ª–∏–∑—É–µ–º –∏—Ö
                    options.forEach(btn => {
                        btn.disabled = true;
                        btn.style.cursor = 'default';
                        btn.style.pointerEvents = 'none';
                        
                        if (btn.dataset.translation === this.selectedWords[currentIndex].translation) {
                            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                            btn.classList.add('translation-correct');
                        } else if (btn === option && !isCorrect) {
                            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                            btn.classList.add('translation-incorrect');
                        }
                    });

                    if (isCorrect) {
                        correctAnswers++;
                    }

                    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–í–ø–µ—Ä–µ–¥"
                    nextBtn.disabled = false;
                    nextBtn.style.opacity = '1';
                    nextBtn.style.cursor = 'pointer';

                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä–µ–¥"
                    nextBtn.onclick = () => {
                        if (currentIndex < this.selectedWords.length - 1) {
                            currentIndex++;
                            updateQuiz();
                        } else {
                            this.totalCorrectAnswers += correctAnswers;
                            modal.remove();
                            this.currentModeIndex++;
                            this.startNextMode();
                        }
                    };
                });
            });
        };

        updateQuiz();
        document.body.appendChild(modal);
    },

    // –†–ï–ñ–ò–ú: Fill in the Blanks
    createFillBlanksModal() {
        let currentIndex = 0;
        let correctAnswers = 0;
        let answeredQuestions = new Set(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã

        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1002;
        `;

        const getWordExamples = (word) => {
            // –ù–∞—Ö–æ–¥–∏–º HTML —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞
            const wordCard = document.querySelector(`[data-word="${word.text}"]`);
            if (!wordCard) {
                return [];
            }

            const examples = [];
            
            // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–º–µ—Ä –∏–∑ .word-example
            const exampleElement = wordCard.querySelector('.word-example');
            if (exampleElement && exampleElement.textContent.trim()) {
                examples.push(exampleElement.textContent.trim());
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ data-extra-examples
            const extraExamples = wordCard.getAttribute('data-extra-examples');
            if (extraExamples) {
                const additionalExamples = extraExamples.split('|').map(ex => ex.trim()).filter(ex => ex.length > 0);
                examples.push(...additionalExamples);
            }
            
            return examples;
        };

        const findBestExample = (word) => {
            const examples = getWordExamples(word);
            
            // –ò—â–µ–º –ø—Ä–∏–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—à–µ —Å–ª–æ–≤–æ
            for (let example of examples) {
                const wordRegex = new RegExp(`\\b${word.text}\\b`, 'i');
                if (wordRegex.test(example)) {
                    return example;
                }
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä
            return `The ${word.text} is very important.`;
        };

        const updateFillBlanks = () => {
            const word = this.selectedWords[currentIndex];
            const example = findBestExample(word);
            
            // –ó–∞–º–µ–Ω—è–µ–º —Å–ª–æ–≤–æ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ)
            const wordRegex = new RegExp(`\\b${word.text}\\b`, 'i');
            const blankSentence = example.replace(wordRegex, '_____');
            
            modal.innerHTML = `
                <div style="background: #f8f9ff; width: 95vw; height: 90vh; border-radius: 12px; padding: 24px; margin: 16px; display: flex; flex-direction: column; box-sizing: border-box;">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px; box-sizing: border-box;">
                        <h2 style="color: var(--card-text-primary); font-size: 24px; margin: 0; box-sizing: border-box;">Fill in the Blanks (${currentIndex + 1}/${this.selectedWords.length})</h2>
                        <button class="close-fillblanks" style="color: var(--card-text-tertiary); background: none; border: none; font-size: 24px; cursor: pointer; box-sizing: border-box;">√ó</button>
                    </div>

                    ${this.createProgressIndicator('fillblanks', currentIndex + 1, this.selectedWords.length)}

                    <div style="flex: 1; display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; box-sizing: border-box;">
                        <div style="background: white; padding: 32px 24px; border-radius: 12px; margin-bottom: 24px; box-shadow: 0 4px 16px rgba(0,0,0,0.1); max-width: 600px; width: 100%; box-sizing: border-box;">
                            <p style="color: #2c3e50; font-size: 24px; margin: 0; line-height: 1.5; font-weight: 500; box-sizing: border-box;">
                                ${blankSentence}
                            </p>
                        </div>
                        
                        <div style="color: var(--card-text-secondary); font-size: 16px; margin-bottom: 24px; box-sizing: border-box;">
                            <strong>–ü–µ—Ä–µ–≤–æ–¥:</strong> ${word.translation}
                        </div>
                        
                        <div style="margin-bottom: 24px; box-sizing: border-box;">
                            <input type="text" id="answer-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ..." 
                                style="width: 350px; padding: 12px; border: 2px solid var(--card-stroke); 
                                border-radius: 8px; font-size: 16px; text-align: center; background: white; 
                                color: var(--card-text-primary); outline: none; transition: all 0.3s ease; box-sizing: border-box;"
                                ${answeredQuestions.has(currentIndex) ? 'disabled' : ''}>
                        </div>
                        
                        <button class="check-answer" 
                            style="background: var(--accent-color); color: white; 
                            padding: 12px 32px; border: none; border-radius: 8px; font-size: 16px; cursor: pointer; 
                            transition: all 0.3s ease; box-sizing: border-box;"
                            ${answeredQuestions.has(currentIndex) ? 'disabled' : ''}>
                            ${answeredQuestions.has(currentIndex) ? '–û—Ç–≤–µ—á–µ–Ω–æ' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'}
                        </button>
                    </div>

                    <!-- –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É -->
                    <div style="display: flex; justify-content: center; align-items: center; margin-top: auto; padding-top: 20px; box-sizing: border-box;">
                        <div style="display: flex; gap: 12px; box-sizing: border-box;">
                            <button class="fillblanks-prev-btn" ${this.currentModeIndex === 0 ? 'disabled' : ''} 
                                style="display: flex; align-items: center; gap: 8px; justify-content: center; padding: 12px 24px; border-radius: 8px; border: none; cursor: pointer; background: var(--card-bg); color: var(--card-text-primary); transition: all 0.3s ease; font-size: 16px; ${this.currentModeIndex === 0 ? 'opacity: 0.5; cursor: not-allowed;' : ''}">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M19 12H5M12 19l-7-7 7-7"/>
                                </svg>
                                –ù–∞–∑–∞–¥
                            </button>
                            
                            <button class="fillblanks-next-btn"
                                style="display: flex; align-items: center; gap: 8px; justify-content: center; padding: 12px 24px; border-radius: 8px; border: none; cursor: pointer; background: var(--accent-color); color: white; transition: all 0.3s ease; font-size: 16px;">
                                ${currentIndex < this.selectedWords.length - 1 ? '–°–ª–µ–¥—É—é—â–∏–π' : (this.currentModeIndex === this.activeModesSequence.length - 1 ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å' : '–í–ø–µ—Ä–µ–¥')}
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M5 12h14M12 5l7 7-7 7"/>
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
            const style = document.createElement('style');
            style.textContent = `
                #answer-input:focus {
                    border-color: var(--accent-color) !important;
                    box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2) !important;
                }
                .check-answer:hover:not(:disabled) {
                    background: var(--text-hover) !important;
                    transform: translateY(-2px) !important;
                }
                .check-answer:disabled {
                    opacity: 0.6 !important;
                    cursor: not-allowed !important;
                }
                .close-fillblanks:hover {
                    color: #e74c3c !important;
                }
            `;
            document.head.appendChild(style);

            // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (answeredQuestions.has(currentIndex)) {
                const input = modal.querySelector('#answer-input');
                const checkBtn = modal.querySelector('.check-answer');
                
                input.value = word.text;
                input.style.borderColor = '#00b894';
                input.style.backgroundColor = '#d1f2eb';
                input.style.color = '#00b894';
                checkBtn.style.background = 'linear-gradient(135deg, #00b894 0%, #00a085 100%)';
            } else {
                // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                setTimeout(() => {
                    const input = modal.querySelector('#answer-input');
                    if (input) input.focus();
                }, 100);
            }

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            const input = modal.querySelector('#answer-input');
            const checkBtn = modal.querySelector('.check-answer');
            const nextBtn = modal.querySelector('.fillblanks-next-btn');
            const prevBtn = modal.querySelector('.fillblanks-prev-btn');

            const checkAnswer = () => {
                if (answeredQuestions.has(currentIndex)) return;

                const userAnswer = input.value.trim().toLowerCase();
                const correctAnswer = word.text.toLowerCase();
                const isCorrect = userAnswer === correctAnswer;

                if (isCorrect) {
                    correctAnswers++;
                    input.style.borderColor = '#00b894';
                    input.style.backgroundColor = '#d1f2eb';
                    input.style.color = '#00b894';
                    checkBtn.textContent = '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úì';
                    checkBtn.style.background = 'linear-gradient(135deg, #00b894 0%, #00a085 100%)';
                } else {
                    input.style.borderColor = '#e74c3c';
                    input.style.backgroundColor = '#fadbd8';
                    input.style.color = '#e74c3c';
                    input.value = word.text;
                    checkBtn.textContent = `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –û—Ç–≤–µ—Ç: ${word.text}`;
                    checkBtn.style.background = 'linear-gradient(135deg, #e74c3c 0%, #c0392b 100%)';
                }

                checkBtn.disabled = true;
                input.disabled = true;
                answeredQuestions.add(currentIndex);
            };

            if (!answeredQuestions.has(currentIndex)) {
                checkBtn.addEventListener('click', checkAnswer);
                
                input.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        checkAnswer();
                    }
                });
            }

            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ä–µ–∂–∏–º—É
            if (prevBtn && !prevBtn.disabled) {
                prevBtn.addEventListener('click', () => {
                    modal.remove();
                    this.currentModeIndex--;
                    this.startNextMode();
                });
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–π/–í–ø–µ—Ä–µ–¥/–ó–∞–≤–µ—Ä—à–∏—Ç—å"
            nextBtn.addEventListener('click', () => {
                if (currentIndex < this.selectedWords.length - 1) {
                    currentIndex++;
                    updateFillBlanks();
                } else {
                    this.totalCorrectAnswers += correctAnswers;
                    modal.remove();
                    this.currentModeIndex++;
                    this.startNextMode();
                }
            });

            // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            modal.querySelector('.close-fillblanks').addEventListener('click', () => {
                this.totalCorrectAnswers += correctAnswers;
                modal.remove();
                this.currentModeIndex++;
                this.startNextMode();
            });
        };

        updateFillBlanks();
        document.body.appendChild(modal);
    },

    // –†–ï–ñ–ò–ú: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä
    createMatchingModal() {
        let matchedPairs = new Set();
        let selectedCard = null;
        let canClick = true;
        let correctMatches = 0;
        let gameCompleted = false;
        
        const shuffleArray = (array) => {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        };

        const createCardHTML = (text, index, isWord = true) => {
            return `
                <div class="matching-card ${isWord ? 'word' : 'translation'}" data-index="${index}"
                    style="background: var(--card-bg); padding: 16px; border: 2px solid var(--card-stroke-secondary); border-radius: 12px; cursor: pointer; 
                    height: 80px; display: flex; align-items: center; justify-content: center; 
                    color: var(--card-text-primary); font-size: 18px; text-align: center; transition: all 0.3s ease;
                    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); box-sizing: border-box;
                    ${matchedPairs.has(index) ? 'background: linear-gradient(135deg, #a8e6b7 0%, #c8f7d0 100%) !important; color: #2d5a3d !important; cursor: default; border: 2px solid #8dd99f !important; box-shadow: 0 4px 20px rgba(141, 217, 159, 0.3) !important;' : ''}">
                    ${text}
                </div>
            `;
        };

        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1002;
        `;

        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã —Å–ª–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        const pairs = this.selectedWords.map((word, index) => ({
            word: word.text,
            translation: word.translation,
            index
        }));

        const words = shuffleArray([...pairs]);
        const translations = shuffleArray([...pairs]);

        modal.innerHTML = `
            <div style="background: #f8f9ff; width: 95vw; height: 90vh; border-radius: 12px; padding: 24px; margin: 16px; display: flex; flex-direction: column; box-sizing: border-box;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px; box-sizing: border-box;">
                    <h2 style="color: var(--card-text-primary); font-size: 24px; margin: 0; box-sizing: border-box;">–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø–∞—Ä—ã</h2>
                    <button class="close-matching" style="color: var(--card-text-tertiary); background: none; border: none; font-size: 24px; cursor: pointer; box-sizing: border-box;">√ó</button>
                </div>

                ${this.createProgressIndicator('matching', 0, pairs.length)}

                <!-- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–ù–¢–ï–ô–ù–ï–† –° –ü–†–û–ö–†–£–¢–ö–û–ô -->
                <div style="flex: 1; display: grid; grid-template-columns: 1fr 1fr; gap: 24px; padding: 20px; box-sizing: border-box; overflow: hidden;">
                    <div class="words-column" style="display: grid; gap: 16px; align-content: start; box-sizing: border-box; overflow-y: auto; padding-right: 8px; max-height: 100%;">
                        ${words.map((pair) => createCardHTML(pair.word, pair.index, true)).join('')}
                    </div>
                    <div class="translations-column" style="display: grid; gap: 16px; align-content: start; box-sizing: border-box; overflow-y: auto; padding-right: 8px; max-height: 100%;">
                        ${translations.map((pair) => createCardHTML(pair.translation, pair.index, false)).join('')}
                    </div>
                </div>

                <!-- –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É -->
                <div style="display: flex; justify-content: center; align-items: center; margin-top: auto; padding-top: 20px; box-sizing: border-box;">
                    <div style="display: flex; gap: 12px; box-sizing: border-box;">
                        <button class="matching-prev-btn" ${this.currentModeIndex === 0 ? 'disabled' : ''} 
                            style="display: flex; align-items: center; gap: 8px; justify-content: center; padding: 12px 24px; border-radius: 8px; border: none; cursor: pointer; background: var(--card-bg); color: var(--card-text-primary); transition: all 0.3s ease; font-size: 16px; ${this.currentModeIndex === 0 ? 'opacity: 0.5; cursor: not-allowed;' : ''}">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M19 12H5M12 19l-7-7 7-7"/>
                            </svg>
                            –ù–∞–∑–∞–¥
                        </button>
                        
                        <button class="matching-next-btn" disabled 
                            style="display: flex; align-items: center; gap: 8px; justify-content: center; padding: 12px 24px; border-radius: 8px; border: none; cursor: pointer; background: var(--accent-color); color: white; transition: all 0.3s ease; opacity: 0.5; font-size: 16px;">
                            ${this.currentModeIndex === this.activeModesSequence.length - 1 ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å' : '–í–ø–µ—Ä–µ–¥'}
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M5 12h14M12 5l7 7-7 7"/>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const nextBtn = modal.querySelector('.matching-next-btn');
        const prevBtn = modal.querySelector('.matching-prev-btn');

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        modal.querySelector('.close-matching').addEventListener('click', () => {
            this.totalCorrectAnswers += correctMatches;
            modal.remove();
            this.currentModeIndex++;
            this.startNextMode();
        });

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ä–µ–∂–∏–º—É
        if (prevBtn && !prevBtn.disabled) {
            prevBtn.addEventListener('click', () => {
                modal.remove();
                this.currentModeIndex--;
                this.startNextMode();
            });
        }

        const handleCardClick = (card) => {
            if (!canClick || matchedPairs.has(parseInt(card.dataset.index))) return;
            if (card === selectedCard) return;

            if (!selectedCard) {
                selectedCard = card;
                card.style.background = 'var(--accent-color)';
                card.style.borderColor = 'var(--accent-color)';
                card.style.color = 'white';
                return;
            }

            canClick = false;
            const firstIndex = parseInt(selectedCard.dataset.index);
            const secondIndex = parseInt(card.dataset.index);

            if (firstIndex === secondIndex) {
                // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–∞—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –∫–∞–∫ –≤ Memory Game
                correctMatches++;
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–µ–ª–µ–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –∏ —Å—Ç–∏–ª–∏ –∫–∞–∫ –≤ Memory Game
                const greenStyle = 'background: linear-gradient(135deg, #a8e6b7 0%, #c8f7d0 100%) !important; color: #2d5a3d !important; border: 2px solid #8dd99f !important; box-shadow: 0 4px 20px rgba(141, 217, 159, 0.3) !important;';
                
                card.style.cssText += greenStyle;
                selectedCard.style.cssText += greenStyle;
                
                matchedPairs.add(firstIndex);

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                const progressBar = modal.querySelector('[style*="background: var(--accent-color)"]');
                if (progressBar) {
                    progressBar.style.width = `${(correctMatches / pairs.length) * 100}%`;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
                if (correctMatches === pairs.length && !gameCompleted) {
                    gameCompleted = true;
                    
                    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–í–ø–µ—Ä–µ–¥"
                    nextBtn.disabled = false;
                    nextBtn.style.opacity = '1';
                    nextBtn.style.cursor = 'pointer';

                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä–µ–¥"
                    nextBtn.onclick = () => {
                        this.totalCorrectAnswers += correctMatches;
                        modal.remove();
                        this.currentModeIndex++;
                        this.startNextMode();
                    };
                }
            } else {
                // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–∞—Ä–∞
                card.style.background = 'var(--danger)';
                card.style.borderColor = 'var(--danger)';
                card.style.color = 'white';
                selectedCard.style.background = 'var(--danger)';
                selectedCard.style.borderColor = 'var(--danger)';
                selectedCard.style.color = 'white';
            }

            setTimeout(() => {
                if (!matchedPairs.has(firstIndex)) {
                    selectedCard.style.background = 'var(--card-bg)';
                    selectedCard.style.borderColor = 'var(--card-stroke-secondary)';
                    selectedCard.style.color = 'var(--card-text-primary)';
                }
                if (!matchedPairs.has(secondIndex)) {
                    card.style.background = 'var(--card-bg)';
                    card.style.borderColor = 'var(--card-stroke-secondary)';
                    card.style.color = 'var(--card-text-primary)';
                }
                selectedCard = null;
                canClick = true;
            }, 1000);
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
        modal.querySelectorAll('.matching-card').forEach(card => {
            card.addEventListener('click', () => {
                handleCardClick(card);
            });
        });
    },

    // –†–ï–ñ–ò–ú: –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤
    createSpellingModal() {
        let currentIndex = 0;
        let correctAnswers = 0;
        let answeredQuestions = new Set(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        let userAnswers = {}; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        const shuffleWord = (word) => {
            return word.split('')
                .sort(() => Math.random() - 0.5)
                .map((letter, index) => ({
                    letter,
                    id: index,
                    isSelected: false
                }));
        };

        const createSpellingHTML = (word, index, total) => {
            const shuffledLetters = shuffleWord(word.text);
            const isAnswered = answeredQuestions.has(index);
            
            return `
                <div style="background: #f8f9ff; width: 95vw; height: 90vh; border-radius: 12px; padding: 24px; margin: 16px; display: flex; flex-direction: column; box-sizing: border-box;">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px; box-sizing: border-box;">
                        <h2 style="color: var(--card-text-primary); font-size: 24px; margin: 0; box-sizing: border-box;">–°–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ (${index + 1}/${total})</h2>
                        <button class="close-spelling" style="color: var(--card-text-tertiary); background: none; border: none; font-size: 24px; cursor: pointer; box-sizing: border-box;">√ó</button>
                    </div>

                    ${this.createProgressIndicator('spelling', index + 1, total)}

                    <div style="flex: 1; display: flex; flex-direction: column; justify-content: center; align-items: center; gap: 32px; box-sizing: border-box;">
                        <div style="text-align: center; box-sizing: border-box;">
                            <p style="color: var(--card-text-tertiary); font-size: 24px; margin-bottom: 8px; box-sizing: border-box;">–ü–µ—Ä–µ–≤–æ–¥:</p>
                            <h3 style="color: var(--card-text-primary); font-size: 32px; margin: 0; box-sizing: border-box;">${word.translation}</h3>
                        </div>

                        <div class="answer-container" style="min-height: 60px; padding: 16px; background: var(--card-bg-tertiary); border: 2px dashed var(--card-stroke-secondary); border-radius: 8px; width: 100%; max-width: 800px; display: flex; flex-wrap: wrap; gap: 8px; justify-content: center; margin-bottom: 16px; transition: all 0.3s ease; box-sizing: border-box;">
                        </div>

                        <div class="letters-container" style="display: flex; flex-wrap: wrap; gap: 8px; justify-content: center; width: 100%; max-width: 800px; box-sizing: border-box;">
                            ${shuffledLetters.map(({letter, id}) => `
                                <div class="letter" data-id="${id}" style="width: 50px; height: 50px; background: var(--card-bg-secondary); border: 1px solid var(--card-stroke); border-radius: 8px; display: flex; align-items: center; justify-content: center; color: var(--card-text-primary); font-size: 24px; cursor: pointer; transition: all 0.2s ease; box-sizing: border-box; ${isAnswered ? 'pointer-events: none; opacity: 0.6;' : ''}">
                                    ${letter}
                                </div>
                            `).join('')}
                        </div>

                        <div style="display: flex; gap: 16px; box-sizing: border-box;">
                            <button class="check-btn" disabled style="padding: 12px 32px; background: var(--card-bg-secondary); color: var(--card-text-primary); border: 1px solid var(--card-stroke); border-radius: 8px; font-size: 16px; cursor: pointer; transition: all 0.3s ease; opacity: 0.5; box-sizing: border-box; ${isAnswered ? 'display: none;' : ''}">
                                –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
                            </button>
                            <button class="reset-btn" style="padding: 12px 32px; background: var(--card-bg-secondary); color: var(--card-text-primary); border: 1px solid var(--card-stroke); border-radius: 8px; font-size: 16px; cursor: pointer; transition: all 0.3s ease; box-sizing: border-box; ${isAnswered ? 'display: none;' : ''}">
                                –°–±—Ä–æ—Å–∏—Ç—å
                            </button>
                            ${isAnswered ? `
                                <div style="padding: 12px 32px; background: linear-gradient(135deg, #a8e6b7 0%, #c8f7d0 100%); color: #2d5a3d; border: 1px solid #8dd99f; border-radius: 8px; font-size: 16px; font-weight: 600; box-sizing: border-box;">
                                    ${userAnswers[index] === word.text.toLowerCase() ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úì' : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚úó'}
                                </div>
                            ` : ''}
                        </div>
                    </div>

                    <!-- –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É -->
                    <div style="display: flex; justify-content: center; align-items: center; margin-top: auto; padding-top: 20px; box-sizing: border-box;">
                        <div style="display: flex; gap: 12px; box-sizing: border-box;">
                            <button class="spelling-prev-btn" ${this.currentModeIndex === 0 ? 'disabled' : ''} 
                                style="display: flex; align-items: center; gap: 8px; justify-content: center; padding: 12px 24px; border-radius: 8px; border: none; cursor: pointer; background: var(--card-bg); color: var(--card-text-primary); transition: all 0.3s ease; font-size: 16px; ${this.currentModeIndex === 0 ? 'opacity: 0.5; cursor: not-allowed;' : ''}">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M19 12H5M12 19l-7-7 7-7"/>
                                </svg>
                                –ù–∞–∑–∞–¥
                            </button>
                            
                            <button class="spelling-next-btn"
                                style="display: flex; align-items: center; gap: 8px; justify-content: center; padding: 12px 24px; border-radius: 8px; border: none; cursor: pointer; background: var(--accent-color); color: white; transition: all 0.3s ease; font-size: 16px;">
                                ${currentIndex < this.selectedWords.length - 1 ? '–°–ª–µ–¥—É—é—â–∏–π' : (this.currentModeIndex === this.activeModesSequence.length - 1 ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å' : '–í–ø–µ—Ä–µ–¥')}
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M5 12h14M12 5l7 7-7 7"/>
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            `;
        };

        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1002;
        `;

        const checkAnswer = () => {
            const answerContainer = modal.querySelector('.answer-container');
            const selectedLetters = answerContainer.querySelectorAll('.letter');
            const userAnswer = Array.from(selectedLetters).map(letter => letter.textContent.trim()).join('');
            const isCorrect = userAnswer.toLowerCase() === this.selectedWords[currentIndex].text.toLowerCase();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userAnswers[currentIndex] = userAnswer.toLowerCase();
            answeredQuestions.add(currentIndex);
            
            if (isCorrect) {
                correctAnswers++;
                answerContainer.style.background = 'linear-gradient(135deg, #a8e6b7 0%, #c8f7d0 100%)';
                answerContainer.style.borderColor = '#8dd99f';
            } else {
                answerContainer.style.background = '#e74c3c';
                answerContainer.style.borderColor = '#e74c3c';
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                setTimeout(() => {
                    answerContainer.innerHTML = '';
                    this.selectedWords[currentIndex].text.split('').forEach(letter => {
                        const letterDiv = document.createElement('div');
                        letterDiv.style.cssText = 'width: 50px; height: 50px; background: linear-gradient(135deg, #a8e6b7 0%, #c8f7d0 100%); border: 1px solid #8dd99f; border-radius: 8px; display: flex; align-items: center; justify-content: center; color: #2d5a3d; font-size: 24px; font-weight: 600;';
                        letterDiv.textContent = letter;
                        answerContainer.appendChild(letterDiv);
                    });
                }, 1500);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            setTimeout(() => {
                updateSpelling();
            }, 2500);
        };

        const updateCheckButton = () => {
            const answerContainer = modal.querySelector('.answer-container');
            const checkBtn = modal.querySelector('.check-btn');
            const selectedLetters = answerContainer.querySelectorAll('.letter');
            
            if (!checkBtn) return; // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            
            if (selectedLetters.length === this.selectedWords[currentIndex].text.length) {
                checkBtn.style.opacity = '1';
                checkBtn.disabled = false;
                checkBtn.style.background = 'var(--accent-color)';
                checkBtn.style.color = 'white';
                checkBtn.style.borderColor = 'var(--accent-color)';
            } else {
                checkBtn.style.opacity = '0.5';
                checkBtn.disabled = true;
                checkBtn.style.background = 'var(--card-bg-secondary)';
                checkBtn.style.color = 'var(--card-text-primary)';
                checkBtn.style.borderColor = 'var(--card-stroke)';
            }
        };

        const updateSpelling = () => {
            modal.innerHTML = createSpellingHTML(
                this.selectedWords[currentIndex],
                currentIndex,
                this.selectedWords.length
            );

            const isAnswered = answeredQuestions.has(currentIndex);

            // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (isAnswered) {
                const answerContainer = modal.querySelector('.answer-container');
                const userAnswer = userAnswers[currentIndex];
                const correctAnswer = this.selectedWords[currentIndex].text.toLowerCase();
                const isCorrect = userAnswer === correctAnswer;
                
                answerContainer.innerHTML = '';
                const answerToShow = isCorrect ? userAnswer : correctAnswer;
                
                answerToShow.split('').forEach(letter => {
                    const letterDiv = document.createElement('div');
                    letterDiv.style.cssText = `width: 50px; height: 50px; background: linear-gradient(135deg, #a8e6b7 0%, #c8f7d0 100%); border: 1px solid #8dd99f; border-radius: 8px; display: flex; align-items: center; justify-content: center; color: #2d5a3d; font-size: 24px; font-weight: 600; box-sizing: border-box;`;
                    letterDiv.textContent = letter;
                    answerContainer.appendChild(letterDiv);
                });
            }

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            modal.querySelector('.close-spelling').addEventListener('click', () => {
                this.totalCorrectAnswers += correctAnswers;
                modal.remove();
                this.currentModeIndex++;
                this.startNextMode();
            });

            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ä–µ–∂–∏–º—É
            const prevBtn = modal.querySelector('.spelling-prev-btn');
            if (prevBtn && !prevBtn.disabled) {
                prevBtn.addEventListener('click', () => {
                    modal.remove();
                    this.currentModeIndex--;
                    this.startNextMode();
                });
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–π/–í–ø–µ—Ä–µ–¥/–ó–∞–≤–µ—Ä—à–∏—Ç—å"
            const nextBtn = modal.querySelector('.spelling-next-btn');
            nextBtn.addEventListener('click', () => {
                if (currentIndex < this.selectedWords.length - 1) {
                    currentIndex++;
                    updateSpelling();
                } else {
                    this.totalCorrectAnswers += correctAnswers;
                    modal.remove();
                    this.currentModeIndex++;
                    this.startNextMode();
                }
            });

            // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤)
            const resetBtn = modal.querySelector('.reset-btn');
            if (resetBtn) {
                resetBtn.addEventListener('click', () => {
                    const lettersContainer = modal.querySelector('.letters-container');
                    const answerContainer = modal.querySelector('.answer-container');
                    
                    Array.from(answerContainer.querySelectorAll('.letter')).forEach(letter => {
                        lettersContainer.appendChild(letter);
                    });
                    
                    updateCheckButton();
                });
            }

            // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤)
            const checkBtn = modal.querySelector('.check-btn');
            if (checkBtn) {
                checkBtn.addEventListener('click', checkAnswer);
            }

            // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±—É–∫–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤)
            if (!isAnswered) {
                const letters = modal.querySelectorAll('.letter');
                letters.forEach(letter => {
                    letter.addEventListener('click', () => {
                        const answerContainer = modal.querySelector('.answer-container');
                        const lettersContainer = modal.querySelector('.letters-container');
                        
                        if (letter.parentElement === answerContainer) {
                            lettersContainer.appendChild(letter);
                        } else {
                            answerContainer.appendChild(letter);
                        }
                        
                        updateCheckButton();
                    });

                    // Hover —ç—Ñ—Ñ–µ–∫—Ç—ã
                    letter.addEventListener('mouseenter', () => {
                        letter.style.background = 'var(--card-hover-secondary)';
                        letter.style.borderColor = 'var(--accent-color)';
                        letter.style.color = 'var(--accent-color)';
                    });

                    letter.addEventListener('mouseleave', () => {
                        letter.style.background = 'var(--card-bg-secondary)';
                        letter.style.borderColor = 'var(--card-stroke)';
                        letter.style.color = 'var(--card-text-primary)';
                    });
                });
            }
        };
        
        updateSpelling();
        document.body.appendChild(modal);
    },

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    showCompletionModal() {
    const modal = document.createElement('div');
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1002;
    `;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–æ–¥—Å—á–µ—Ç - –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä–µ–∂–∏–º—ã
    const totalPossibleAnswers = this.activeModesSequence.reduce((total, mode) => {
        if (mode === 'translation' || mode === 'matching' || mode === 'spelling' || mode === 'memory' || mode === 'fillblanks') {
            return total + this.selectedWords.length;
        }
        return total;
    }, 0);

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    const actualCorrectAnswers = Math.min(this.totalCorrectAnswers, totalPossibleAnswers);
    
    const successRate = totalPossibleAnswers > 0 ? (actualCorrectAnswers / totalPossibleAnswers) : 0;
    const successPercentage = Math.min(100, Math.round(successRate * 100));

    console.log('üî¢ Debug calculation:');
    console.log('Active modes:', this.activeModesSequence);
    console.log('Raw total correct answers:', this.totalCorrectAnswers);
    console.log('Actual correct answers (limited):', actualCorrectAnswers);
    console.log('Total possible answers:', totalPossibleAnswers);
    console.log('Success percentage:', successPercentage);

    modal.innerHTML = `
        <div style="background: var(--card-bg); width: 95vw; max-width: 500px; border-radius: 12px; padding: 32px; text-align: center;">
            <div style="font-size: 64px; margin-bottom: 16px;">${successPercentage >= 90 ? 'üéâ' : 'üìö'}</div>
            <h2 style="color: var(--card-text-primary); font-size: 24px; margin-bottom: 16px;">–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h2>
            <p style="color: var(--card-text-tertiary); font-size: 18px; margin-bottom: 16px;">
                –†–µ–∑—É–ª—å—Ç–∞—Ç: <strong style="color: var(--card-text-primary);">${successPercentage}%</strong>
            </p>
            <p style="color: var(--card-text-tertiary); font-size: 16px; margin-bottom: 16px;">
                –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <strong style="color: var(--card-text-primary);">${actualCorrectAnswers}</strong> –∏–∑ <strong>${totalPossibleAnswers}</strong>
            </p>
            ${successPercentage >= 90 ? `
                <p style="color: var(--correct-text); font-size: 18px; margin-bottom: 32px; font-weight: 600; background: var(--correct-bg); padding: 12px; border-radius: 8px; border: 1px solid var(--correct-border);">
                    üéâ –û—Ç–ª–∏—á–Ω–æ! –°–ª–æ–≤–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ "–ò–∑—É—á–µ–Ω–æ"
                </p>
            ` : `
                <p style="color: var(--card-text-tertiary); font-size: 16px; margin-bottom: 32px; background: var(--neutral-bg); padding: 12px; border-radius: 8px; border: 1px solid var(--neutral-border);">
                    üìö –ù—É–∂–Ω–æ 90%+ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤ –≤ "–ò–∑—É—á–µ–Ω–æ"
                </p>
            `}
            <button class="close-completion" style="padding: 12px 32px; background: var(--accent-color); color: white; border: none; border-radius: 8px; cursor: pointer; font-size: 16px; transition: all 0.3s ease; width: 100%;">
                –ó–∞–∫—Ä—ã—Ç—å
            </button>
        </div>
    `;

    document.body.appendChild(modal);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    if (window.cambridgeApp) {
        window.cambridgeApp.updateTrainingStats(actualCorrectAnswers, totalPossibleAnswers, this.selectedWords);
    }

    modal.querySelector('.close-completion').addEventListener('click', () => {
        modal.remove();
        this.totalCorrectAnswers = 0;
        this.currentModeIndex = 0;
        this.currentCardIndex = 0;
        
        // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        if (window.cambridgeApp) {
            window.cambridgeApp.clearSelection();
        }
    });

    // Hover —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏
    const closeBtn = modal.querySelector('.close-completion');
    closeBtn.addEventListener('mouseenter', () => {
        closeBtn.style.background = 'var(--text-hover)';
        closeBtn.style.transform = 'translateY(-2px)';
        closeBtn.style.boxShadow = '0 4px 12px rgba(102, 126, 234, 0.3)';
    });

    closeBtn.addEventListener('mouseleave', () => {
        closeBtn.style.background = 'var(--accent-color)';
        closeBtn.style.transform = 'translateY(0)';
        closeBtn.style.boxShadow = 'none';
    });
}
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    console.log('üéØ Training modes system loaded');
    
    // –§—É–Ω–∫—Ü–∏—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    window.toggleCategory = function(header) {
        const section = header.parentElement;
        section.classList.toggle('collapsed');
    };
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    window.pronounceWord = function(word) {
        if ('speechSynthesis' in window) {
            const utterance = new SpeechSynthesisUtterance(word);
            utterance.lang = 'en-US';
            speechSynthesis.speak(utterance);
        }
    };

    window.toggleFavorite = function(word, category) {
        if (window.cambridgeApp) {
            const button = event.target;
            window.cambridgeApp.toggleFavorite(word, button);
        }
    };

    window.deleteWord = function(word, category) {
        if (window.cambridgeApp && confirm(`–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ "${word}"?`)) {
            window.cambridgeApp.deleteWord(word);
        }
    };

    console.log('‚úÖ Training system fully initialized');
});

console.log('üèÜ All training modes loaded successfully');